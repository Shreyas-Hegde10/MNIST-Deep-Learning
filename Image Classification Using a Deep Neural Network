{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport torch\nimport torchvision\nimport numpy as np\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torchvision.datasets import MNIST\nfrom torchvision.transforms import ToTensor\nfrom torchvision.utils import make_grid\nfrom torch.utils.data.dataloader import DataLoader\nfrom torch.utils.data import random_split \nimport optuna\n%matplotlib inline\n\n# Use a white background for matplotlib figures\nmatplotlib.rcParams['figure.facecolor'] = '#ffffff'\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-01T13:47:03.751830Z","iopub.execute_input":"2024-09-01T13:47:03.752799Z","iopub.status.idle":"2024-09-01T13:47:07.984450Z","shell.execute_reply.started":"2024-09-01T13:47:03.752739Z","shell.execute_reply":"2024-09-01T13:47:07.983421Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"markdown","source":"Loading Dataset","metadata":{}},{"cell_type":"code","source":"dataset = MNIST(root='data/', download=True, transform=ToTensor())","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:07.986481Z","iopub.execute_input":"2024-09-01T13:47:07.986912Z","iopub.status.idle":"2024-09-01T13:47:11.489914Z","shell.execute_reply.started":"2024-09-01T13:47:07.986879Z","shell.execute_reply":"2024-09-01T13:47:11.488852Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\nFailed to download (trying next):\nHTTP Error 403: Forbidden\n\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/train-images-idx3-ubyte.gz to data/MNIST/raw/train-images-idx3-ubyte.gz\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 9912422/9912422 [00:00<00:00, 33216563.69it/s]\n","output_type":"stream"},{"name":"stdout","text":"Extracting data/MNIST/raw/train-images-idx3-ubyte.gz to data/MNIST/raw\n\nDownloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\nFailed to download (trying next):\nHTTP Error 403: Forbidden\n\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/train-labels-idx1-ubyte.gz to data/MNIST/raw/train-labels-idx1-ubyte.gz\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 28881/28881 [00:00<00:00, 971401.37it/s]\n","output_type":"stream"},{"name":"stdout","text":"Extracting data/MNIST/raw/train-labels-idx1-ubyte.gz to data/MNIST/raw\n\nDownloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\nFailed to download (trying next):\nHTTP Error 403: Forbidden\n\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-images-idx3-ubyte.gz to data/MNIST/raw/t10k-images-idx3-ubyte.gz\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 1648877/1648877 [00:00<00:00, 9210393.95it/s]\n","output_type":"stream"},{"name":"stdout","text":"Extracting data/MNIST/raw/t10k-images-idx3-ubyte.gz to data/MNIST/raw\n\nDownloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\nFailed to download (trying next):\nHTTP Error 403: Forbidden\n\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz\nDownloading https://ossci-datasets.s3.amazonaws.com/mnist/t10k-labels-idx1-ubyte.gz to data/MNIST/raw/t10k-labels-idx1-ubyte.gz\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 4542/4542 [00:00<00:00, 2264415.64it/s]","output_type":"stream"},{"name":"stdout","text":"Extracting data/MNIST/raw/t10k-labels-idx1-ubyte.gz to data/MNIST/raw\n\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Viewing Samples","metadata":{}},{"cell_type":"code","source":"image, label = dataset[0]\nprint('image.shape:', image.shape)\nplt.imshow(image.permute(1, 2, 0), cmap='gray')\nprint('Label:', label)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:11.491203Z","iopub.execute_input":"2024-09-01T13:47:11.491583Z","iopub.status.idle":"2024-09-01T13:47:11.813904Z","shell.execute_reply.started":"2024-09-01T13:47:11.491533Z","shell.execute_reply":"2024-09-01T13:47:11.812834Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"image.shape: torch.Size([1, 28, 28])\nLabel: 5\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"Creating Training and Validation Steps","metadata":{}},{"cell_type":"code","source":"val_size = 10000 \ntest_size = 5000\ntrain_size = len(dataset) - val_size - test_size\n\ntrain_ds, val_ds, test_ds = random_split(dataset, [train_size, val_size, test_size])\nprint(len(train_ds),len(val_ds), len(test_ds)) ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:11.815114Z","iopub.execute_input":"2024-09-01T13:47:11.815483Z","iopub.status.idle":"2024-09-01T13:47:11.834760Z","shell.execute_reply.started":"2024-09-01T13:47:11.815445Z","shell.execute_reply":"2024-09-01T13:47:11.833834Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"45000 10000 5000\n","output_type":"stream"}]},{"cell_type":"code","source":"batch_size = 128 \ntrain_loader = DataLoader(train_ds, batch_size, shuffle=True, num_workers=4, pin_memory=True) \nval_loader = DataLoader(val_ds, batch_size*2, num_workers=4, pin_memory=True) \ntest_loader = DataLoader(test_ds, batch_size*2, num_workers=4, pin_memory=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:11.837732Z","iopub.execute_input":"2024-09-01T13:47:11.838070Z","iopub.status.idle":"2024-09-01T13:47:11.844118Z","shell.execute_reply.started":"2024-09-01T13:47:11.838034Z","shell.execute_reply":"2024-09-01T13:47:11.843244Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"# Visualizing some samples from the training set \nfor images,_ in train_loader: \n    print('images.shape: ', images.shape)\n    print('grid.shape: ', make_grid(images, nrow=16).shape) \n    plt.axis('off')\n    plt.imshow(make_grid(images,nrow=16).permute(1,2,0)) \n    break\n    ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:11.845607Z","iopub.execute_input":"2024-09-01T13:47:11.845901Z","iopub.status.idle":"2024-09-01T13:47:12.550919Z","shell.execute_reply.started":"2024-09-01T13:47:11.845868Z","shell.execute_reply":"2024-09-01T13:47:12.549680Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"images.shape:  torch.Size([128, 1, 28, 28])\ngrid.shape:  torch.Size([3, 242, 482])\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"#Flattening images into vectors of size 784\nfor images,labels in train_loader: \n    print('images.shape: ', images.shape)\n    inputs = images.reshape(-1,784)\n    print('inputs.shape: ', inputs.shape)\n    break","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:12.552405Z","iopub.execute_input":"2024-09-01T13:47:12.552835Z","iopub.status.idle":"2024-09-01T13:47:12.763092Z","shell.execute_reply.started":"2024-09-01T13:47:12.552780Z","shell.execute_reply":"2024-09-01T13:47:12.761838Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"images.shape:  torch.Size([128, 1, 28, 28])\ninputs.shape:  torch.Size([128, 784])\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Creating A Hidden Layer","metadata":{}},{"cell_type":"code","source":"input_size = inputs.shape[-1]\nhidden_size = 32 \nlayer1 = nn.Linear(input_size,hidden_size)# Input: input_size, Output: hidden_size","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:12.765206Z","iopub.execute_input":"2024-09-01T13:47:12.765721Z","iopub.status.idle":"2024-09-01T13:47:12.773124Z","shell.execute_reply.started":"2024-09-01T13:47:12.765658Z","shell.execute_reply":"2024-09-01T13:47:12.771914Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"layer1_outputs = layer1(inputs)\nprint('layer1_outputs.shape: ', layer1_outputs.shape)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:12.774985Z","iopub.execute_input":"2024-09-01T13:47:12.775526Z","iopub.status.idle":"2024-09-01T13:47:12.815973Z","shell.execute_reply.started":"2024-09-01T13:47:12.775477Z","shell.execute_reply":"2024-09-01T13:47:12.815005Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"layer1_outputs.shape:  torch.Size([128, 32])\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Activation function ","metadata":{}},{"cell_type":"code","source":"relu_outputs = F.relu(layer1_outputs)\nprint('min(layer1_outputs):', torch.min(layer1_outputs).item())\nprint('min(relu_outputs):', torch.min(relu_outputs).item()) ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:12.817444Z","iopub.execute_input":"2024-09-01T13:47:12.818063Z","iopub.status.idle":"2024-09-01T13:47:12.831101Z","shell.execute_reply.started":"2024-09-01T13:47:12.818016Z","shell.execute_reply":"2024-09-01T13:47:12.830055Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"min(layer1_outputs): -0.6171680092811584\nmin(relu_outputs): 0.0\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Output Layer","metadata":{}},{"cell_type":"code","source":"output_size = 10 \nlayer2 = nn.Linear(hidden_size, output_size) # Input: hidden_size, Output: output_size\nlayer2_outputs = layer2(relu_outputs)\nprint(layer2_outputs.shape)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:12.832526Z","iopub.execute_input":"2024-09-01T13:47:12.832805Z","iopub.status.idle":"2024-09-01T13:47:12.842985Z","shell.execute_reply.started":"2024-09-01T13:47:12.832775Z","shell.execute_reply":"2024-09-01T13:47:12.841873Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"torch.Size([128, 10])\n","output_type":"stream"}]},{"cell_type":"code","source":"# Computing loss \nF.cross_entropy(layer2_outputs, labels)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:12.844401Z","iopub.execute_input":"2024-09-01T13:47:12.844963Z","iopub.status.idle":"2024-09-01T13:47:12.872975Z","shell.execute_reply.started":"2024-09-01T13:47:12.844918Z","shell.execute_reply":"2024-09-01T13:47:12.871967Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"tensor(2.3319, grad_fn=<NllLossBackward0>)"},"metadata":{}}]},{"cell_type":"markdown","source":"Creating Model ","metadata":{}},{"cell_type":"code","source":"class MnistModel(nn.Module):\n    # Class constructor \n    def __init__(self, in_size, hidden_size, out_size):\n        super().__init__()\n        # hidden layer\n        self.linear1 = nn.Linear(in_size, hidden_size)\n        # output layer\n        self.linear2 = nn.Linear(hidden_size, out_size)\n    \n    # Forward pass method    \n    def forward(self, xb):\n        # Flatten the image tensors\n        xb = xb.view(xb.size(0), -1)\n        # Get intermediate outputs using hidden layer\n        out = self.linear1(xb)\n        # Apply activation function\n        out = F.relu(out)\n        # Get predictions using output layer\n        out = self.linear2(out)\n        return out\n    \n    # Training method\n    def training_step(self, batch):\n        images, labels = batch \n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels) # Calculate loss\n        return loss\n    \n    # Validation loss and accuracy method\n    def validation_step(self, batch):\n        images, labels = batch \n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss, 'val_acc': acc}\n    \n    # Method used for combining batch losses & accuracies into epoch losses/accuracies\n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n    \n    # Method used for format validation losses and accuracies\n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], val_loss: {:.4f}, val_acc: {:.4f}\".format(epoch, result['val_loss'], result['val_acc']))\n    \n    # Test loss and accuracy method\n    def test_step(self, batch):\n        images, labels = batch\n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'test_loss': loss, 'test_acc': acc}\n    \n    # Method used for combining batch losses & accuracies into epoch losses/accuracies for the test set\n    def test_epoch_end(self, outputs):\n        batch_losses = [x['test_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['test_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'test_loss': epoch_loss.item(), 'test_acc': epoch_acc.item()}\n    \n    # Method used for format test losses and accuracies\n    def epoch_endtest(self, epoch, result):\n        print(\"Epoch [{}], test_loss: {:.4f}, test_acc: {:.4f}\".format(epoch, result['test_loss'], result['test_acc']))","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:12.874641Z","iopub.execute_input":"2024-09-01T13:47:12.875026Z","iopub.status.idle":"2024-09-01T13:47:12.891409Z","shell.execute_reply.started":"2024-09-01T13:47:12.874983Z","shell.execute_reply":"2024-09-01T13:47:12.890563Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# Accuracy function \ndef accuracy(outputs, labels): \n    _, preds = torch.max(outputs, dim=1)\n    return torch.tensor(torch.sum(preds == labels)/len(preds))\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:12.897403Z","iopub.execute_input":"2024-09-01T13:47:12.897755Z","iopub.status.idle":"2024-09-01T13:47:12.903684Z","shell.execute_reply.started":"2024-09-01T13:47:12.897717Z","shell.execute_reply":"2024-09-01T13:47:12.902574Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# Creating a model \ninput_size = 784 \nhidden_size = 32 \nnum_classes = 10 ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:12.905196Z","iopub.execute_input":"2024-09-01T13:47:12.905557Z","iopub.status.idle":"2024-09-01T13:47:12.911185Z","shell.execute_reply.started":"2024-09-01T13:47:12.905512Z","shell.execute_reply":"2024-09-01T13:47:12.910162Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"model = MnistModel(input_size, hidden_size,num_classes)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:12.912537Z","iopub.execute_input":"2024-09-01T13:47:12.913307Z","iopub.status.idle":"2024-09-01T13:47:12.919932Z","shell.execute_reply.started":"2024-09-01T13:47:12.913265Z","shell.execute_reply":"2024-09-01T13:47:12.918727Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"for images, labels in train_loader:\n    outputs = model(images)\n    loss = F.cross_entropy(outputs, labels)\n    print('Loss:', loss.item())\n    break\n\nprint('outputs.shape : ', outputs.shape)\nprint('Sample outputs :\\n', outputs[:2].data)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:12.921354Z","iopub.execute_input":"2024-09-01T13:47:12.921909Z","iopub.status.idle":"2024-09-01T13:47:13.152666Z","shell.execute_reply.started":"2024-09-01T13:47:12.921862Z","shell.execute_reply":"2024-09-01T13:47:13.151380Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"Loss: 2.3175392150878906\noutputs.shape :  torch.Size([128, 10])\nSample outputs :\n tensor([[-0.0192, -0.0362, -0.0747,  0.1807,  0.1909,  0.0105,  0.0310,  0.0197,\n         -0.1333,  0.1511],\n        [ 0.0221, -0.0812, -0.2206,  0.2277,  0.0074, -0.0629,  0.0553, -0.0661,\n         -0.1430,  0.1790]])\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Using a GPU","metadata":{}},{"cell_type":"code","source":"# Checking if NVIDIA CUDA drivers are installed and if GPU is available\ntorch.cuda.is_available() # True\n\n# Function to check if GPUs are available\ndef get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu') \ndevice = get_default_device() \nprint(device)\n    ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:13.154309Z","iopub.execute_input":"2024-09-01T13:47:13.154749Z","iopub.status.idle":"2024-09-01T13:47:13.162632Z","shell.execute_reply.started":"2024-09-01T13:47:13.154707Z","shell.execute_reply":"2024-09-01T13:47:13.161277Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"cuda\n","output_type":"stream"}]},{"cell_type":"code","source":"# Definining a function that can move data and model to a chosen device \ndef to_device(data,device): \n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:13.164041Z","iopub.execute_input":"2024-09-01T13:47:13.164401Z","iopub.status.idle":"2024-09-01T13:47:13.172631Z","shell.execute_reply.started":"2024-09-01T13:47:13.164337Z","shell.execute_reply":"2024-09-01T13:47:13.171560Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"# Creating a class to wrap existing data loaders and move data batches to selected device \nclass DeviceDataLoader(): \n    # Class constructor \n    def __init__(self, data_loader, device): \n        self.data_loader = data_loader \n        self.device = device\n    \n    # Method used to yield a batch of data after moving to a device \n    def __iter__(self): \n        for b in self.data_loader: \n            yield to_device(b, self.device) \n    \n    # Creating a method to find number of batches \n    def __len__(self): \n        return len(self.data_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:13.173863Z","iopub.execute_input":"2024-09-01T13:47:13.174189Z","iopub.status.idle":"2024-09-01T13:47:13.183424Z","shell.execute_reply.started":"2024-09-01T13:47:13.174155Z","shell.execute_reply":"2024-09-01T13:47:13.182487Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"# Wrapping data loaders using previous class \ntrain_loader = DeviceDataLoader(train_loader, device)\nval_loader = DeviceDataLoader(val_loader, device)\ntest_loader = DeviceDataLoader(test_loader, device)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:13.184830Z","iopub.execute_input":"2024-09-01T13:47:13.185198Z","iopub.status.idle":"2024-09-01T13:47:13.191263Z","shell.execute_reply.started":"2024-09-01T13:47:13.185162Z","shell.execute_reply":"2024-09-01T13:47:13.190247Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"# Checking if tensors have moved to the GPU device \nfor xb, yb in val_loader:\n    print('xb.device:', xb.device)\n    print('yb:', yb)\n    break \n\n# Successfully moved to GPU device ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:13.192914Z","iopub.execute_input":"2024-09-01T13:47:13.193312Z","iopub.status.idle":"2024-09-01T13:47:13.447939Z","shell.execute_reply.started":"2024-09-01T13:47:13.193259Z","shell.execute_reply":"2024-09-01T13:47:13.446688Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"xb.device: cuda:0\nyb: tensor([7, 2, 6, 5, 5, 3, 4, 8, 9, 8, 2, 9, 8, 3, 1, 1, 4, 4, 4, 0, 8, 4, 9, 3,\n        4, 8, 7, 4, 3, 7, 3, 4, 5, 4, 6, 9, 1, 5, 8, 4, 7, 7, 9, 4, 8, 2, 8, 8,\n        7, 9, 2, 4, 8, 9, 7, 8, 5, 3, 3, 3, 0, 9, 2, 2, 4, 0, 4, 3, 5, 6, 6, 7,\n        0, 0, 0, 0, 2, 8, 7, 8, 7, 0, 6, 8, 0, 3, 9, 9, 4, 4, 1, 4, 7, 1, 3, 5,\n        9, 0, 6, 2, 2, 1, 4, 7, 0, 1, 3, 8, 7, 3, 8, 3, 0, 0, 9, 7, 1, 5, 3, 4,\n        7, 5, 3, 3, 0, 3, 5, 2, 5, 5, 0, 7, 1, 4, 3, 3, 1, 8, 4, 1, 0, 9, 3, 1,\n        8, 1, 2, 6, 9, 0, 8, 9, 0, 1, 6, 1, 7, 1, 4, 9, 1, 8, 5, 2, 0, 3, 6, 1,\n        3, 0, 7, 2, 9, 1, 9, 9, 8, 5, 6, 0, 1, 9, 8, 8, 5, 9, 5, 8, 8, 1, 5, 1,\n        8, 1, 0, 9, 6, 6, 9, 1, 4, 1, 4, 0, 7, 0, 5, 9, 0, 6, 9, 0, 2, 6, 6, 2,\n        8, 1, 6, 7, 1, 1, 6, 4, 9, 0, 7, 3, 9, 3, 0, 0, 5, 3, 6, 8, 8, 0, 8, 1,\n        4, 4, 4, 9, 0, 3, 7, 1, 9, 5, 7, 4, 6, 2, 7, 8], device='cuda:0')\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Training the Model ","metadata":{}},{"cell_type":"code","source":"def evaluate(model, val_loader):\n    \"\"\"Evaluate the model's performance on the validation set\"\"\"\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef fit(epochs, lr, model, train_loader, val_loader,opt_func=torch.optim.SGD):\n    \"\"\"Train the model using gradient descent\"\"\"\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        for batch in train_loader:\n            loss = model.training_step(batch)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history\n            ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:13.449910Z","iopub.execute_input":"2024-09-01T13:47:13.450291Z","iopub.status.idle":"2024-09-01T13:47:13.459223Z","shell.execute_reply.started":"2024-09-01T13:47:13.450248Z","shell.execute_reply":"2024-09-01T13:47:13.458290Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"# Model (on GPU)\nmodel_gpu = MnistModel(input_size, hidden_size=hidden_size, out_size=num_classes)\nto_device(model_gpu, device)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:13.460392Z","iopub.execute_input":"2024-09-01T13:47:13.460712Z","iopub.status.idle":"2024-09-01T13:47:13.472886Z","shell.execute_reply.started":"2024-09-01T13:47:13.460678Z","shell.execute_reply":"2024-09-01T13:47:13.471715Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"MnistModel(\n  (linear1): Linear(in_features=784, out_features=32, bias=True)\n  (linear2): Linear(in_features=32, out_features=10, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"history1 = fit(5, 0.5, model_gpu, train_loader, val_loader) ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:13.474350Z","iopub.execute_input":"2024-09-01T13:47:13.474784Z","iopub.status.idle":"2024-09-01T13:47:33.414592Z","shell.execute_reply.started":"2024-09-01T13:47:13.474737Z","shell.execute_reply":"2024-09-01T13:47:33.413191Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.2400, val_acc: 0.9359\nEpoch [1], val_loss: 0.2248, val_acc: 0.9325\nEpoch [2], val_loss: 0.1743, val_acc: 0.9472\nEpoch [3], val_loss: 0.1464, val_acc: 0.9566\nEpoch [4], val_loss: 0.1373, val_acc: 0.9584\n","output_type":"stream"}]},{"cell_type":"code","source":"history2 = fit(5, 0.5, model_gpu, train_loader, val_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:33.416543Z","iopub.execute_input":"2024-09-01T13:47:33.416985Z","iopub.status.idle":"2024-09-01T13:47:53.452330Z","shell.execute_reply.started":"2024-09-01T13:47:33.416940Z","shell.execute_reply":"2024-09-01T13:47:53.451043Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.1573, val_acc: 0.9536\nEpoch [1], val_loss: 0.1311, val_acc: 0.9611\nEpoch [2], val_loss: 0.1288, val_acc: 0.9603\nEpoch [3], val_loss: 0.1576, val_acc: 0.9528\nEpoch [4], val_loss: 0.1232, val_acc: 0.9645\n","output_type":"stream"}]},{"cell_type":"code","source":"history3 = fit(5, 0.5, model_gpu, train_loader, val_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:47:53.454280Z","iopub.execute_input":"2024-09-01T13:47:53.454802Z","iopub.status.idle":"2024-09-01T13:48:13.539267Z","shell.execute_reply.started":"2024-09-01T13:47:53.454746Z","shell.execute_reply":"2024-09-01T13:48:13.538068Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.1252, val_acc: 0.9618\nEpoch [1], val_loss: 0.1229, val_acc: 0.9648\nEpoch [2], val_loss: 0.1300, val_acc: 0.9610\nEpoch [3], val_loss: 0.1431, val_acc: 0.9577\nEpoch [4], val_loss: 0.1245, val_acc: 0.9640\n","output_type":"stream"}]},{"cell_type":"code","source":"history4 = fit(5, 0.1, model_gpu, train_loader, val_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:48:13.541214Z","iopub.execute_input":"2024-09-01T13:48:13.541632Z","iopub.status.idle":"2024-09-01T13:48:34.440023Z","shell.execute_reply.started":"2024-09-01T13:48:13.541591Z","shell.execute_reply":"2024-09-01T13:48:34.438795Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.1107, val_acc: 0.9657\nEpoch [1], val_loss: 0.1117, val_acc: 0.9664\nEpoch [2], val_loss: 0.1107, val_acc: 0.9682\nEpoch [3], val_loss: 0.1107, val_acc: 0.9683\nEpoch [4], val_loss: 0.1141, val_acc: 0.9664\n","output_type":"stream"}]},{"cell_type":"code","source":"history5 = fit(5, 0.1, model_gpu, train_loader, val_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:48:34.441746Z","iopub.execute_input":"2024-09-01T13:48:34.442118Z","iopub.status.idle":"2024-09-01T13:48:54.563634Z","shell.execute_reply.started":"2024-09-01T13:48:34.442079Z","shell.execute_reply":"2024-09-01T13:48:54.562321Z"},"trusted":true},"execution_count":29,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.1127, val_acc: 0.9667\nEpoch [1], val_loss: 0.1135, val_acc: 0.9660\nEpoch [2], val_loss: 0.1136, val_acc: 0.9664\nEpoch [3], val_loss: 0.1137, val_acc: 0.9659\nEpoch [4], val_loss: 0.1150, val_acc: 0.9660\n","output_type":"stream"}]},{"cell_type":"code","source":"history = history1+history2+history3+history4\naccuracies = [result['val_acc'] for result in history]\nplt.plot(accuracies, '-x')\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.title('Accuracy Compared To # of Epochs')","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:48:54.565483Z","iopub.execute_input":"2024-09-01T13:48:54.565874Z","iopub.status.idle":"2024-09-01T13:48:54.949182Z","shell.execute_reply.started":"2024-09-01T13:48:54.565834Z","shell.execute_reply":"2024-09-01T13:48:54.948104Z"},"trusted":true},"execution_count":30,"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Accuracy Compared To # of Epochs')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"Hyperparameter Optimization ","metadata":{}},{"cell_type":"code","source":"#Defining objective function\ndef objective(trial):\n\n    # Hyperparameters to tune\n    learning_rate = trial.suggest_loguniform('lr', 1e-2, 1e-0)\n\n    # Creating the model\n    model = MnistModel(input_size, hidden_size=hidden_size, out_size=num_classes)\n    to_device(model, device)\n\n    # Optimizer\n    optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)\n\n    # Train and val loaders\n    train_loader = DataLoader(train_ds, batch_size=128, shuffle=True)\n    val_loader = DataLoader(val_ds, batch_size=256)\n    train_loader = DeviceDataLoader(train_loader, device)\n    val_loader = DeviceDataLoader(val_loader, device)\n\n    \n    num_epochs = 5\n    for epoch in range(num_epochs):\n        for batch in train_loader:\n\n             # Training Loop\n            loss = model.training_step(batch)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n\n        # Validation Stage\n        result = evaluate(model, val_loader)\n\n    return result['val_acc']\n    \n    ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:48:54.950905Z","iopub.execute_input":"2024-09-01T13:48:54.951774Z","iopub.status.idle":"2024-09-01T13:48:54.960778Z","shell.execute_reply.started":"2024-09-01T13:48:54.951716Z","shell.execute_reply":"2024-09-01T13:48:54.959696Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"# Create a study object\nstudy = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=10)  # Number of trials\n\n# Get the best trial\nbest_trial = study.best_trial\n\n# Print the best hyperparameters, best accuracy, and trial number\nprint(f\"Best hyperparameters: {best_trial.params}\")\nprint(f\"Best test accuracy: {best_trial.value:.4f}\")\nprint(f\"Trial number with best test accuracy: {best_trial.number}\")","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:48:54.962099Z","iopub.execute_input":"2024-09-01T13:48:54.962533Z","iopub.status.idle":"2024-09-01T13:54:52.644309Z","shell.execute_reply.started":"2024-09-01T13:48:54.962495Z","shell.execute_reply":"2024-09-01T13:54:52.643299Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stderr","text":"[I 2024-09-01 13:48:54,971] A new study created in memory with name: no-name-07703987-1f72-41d0-b028-d16d144d7b43\n/tmp/ipykernel_36/4016277099.py:5: FutureWarning: suggest_loguniform has been deprecated in v3.0.0. This feature will be removed in v6.0.0. See https://github.com/optuna/optuna/releases/tag/v3.0.0. Use suggest_float(..., log=True) instead.\n  learning_rate = trial.suggest_loguniform('lr', 1e-2, 1e-0)\n/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n[I 2024-09-01 13:49:31,130] Trial 0 finished with value: 0.933789074420929 and parameters: {'lr': 0.10299724784185849}. Best is trial 0 with value: 0.933789074420929.\n[I 2024-09-01 13:50:06,754] Trial 1 finished with value: 0.9253906607627869 and parameters: {'lr': 0.07082104491472699}. Best is trial 0 with value: 0.933789074420929.\n[I 2024-09-01 13:50:42,138] Trial 2 finished with value: 0.925097644329071 and parameters: {'lr': 0.0718017832873811}. Best is trial 0 with value: 0.933789074420929.\n[I 2024-09-01 13:51:17,637] Trial 3 finished with value: 0.844433605670929 and parameters: {'lr': 0.9859124656792879}. Best is trial 0 with value: 0.933789074420929.\n[I 2024-09-01 13:51:53,677] Trial 4 finished with value: 0.935546875 and parameters: {'lr': 0.8608962102537839}. Best is trial 4 with value: 0.935546875.\n[I 2024-09-01 13:52:29,837] Trial 5 finished with value: 0.959277331829071 and parameters: {'lr': 0.7908263627481256}. Best is trial 5 with value: 0.959277331829071.\n[I 2024-09-01 13:53:05,627] Trial 6 finished with value: 0.9322265982627869 and parameters: {'lr': 0.08372768164965999}. Best is trial 5 with value: 0.959277331829071.\n[I 2024-09-01 13:53:41,141] Trial 7 finished with value: 0.9551758170127869 and parameters: {'lr': 0.2858715069886833}. Best is trial 5 with value: 0.959277331829071.\n[I 2024-09-01 13:54:17,012] Trial 8 finished with value: 0.963671863079071 and parameters: {'lr': 0.5082839076857731}. Best is trial 8 with value: 0.963671863079071.\n[I 2024-09-01 13:54:52,639] Trial 9 finished with value: 0.934277355670929 and parameters: {'lr': 0.11299259589554618}. Best is trial 8 with value: 0.963671863079071.\n","output_type":"stream"},{"name":"stdout","text":"Best hyperparameters: {'lr': 0.5082839076857731}\nBest test accuracy: 0.9637\nTrial number with best test accuracy: 8\n","output_type":"stream"}]},{"cell_type":"code","source":"{'lr': 0.0178878518656460}\n{'lr': 0.09833396206168134}","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:54:52.645805Z","iopub.execute_input":"2024-09-01T13:54:52.646216Z","iopub.status.idle":"2024-09-01T13:54:52.653842Z","shell.execute_reply.started":"2024-09-01T13:54:52.646169Z","shell.execute_reply":"2024-09-01T13:54:52.652827Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"{'lr': 0.09833396206168134}"},"metadata":{}}]},{"cell_type":"code","source":"m1 = MnistModel(input_size, hidden_size=hidden_size, out_size=num_classes)\nto_device(m1, device)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:54:52.655131Z","iopub.execute_input":"2024-09-01T13:54:52.655518Z","iopub.status.idle":"2024-09-01T13:54:52.666575Z","shell.execute_reply.started":"2024-09-01T13:54:52.655481Z","shell.execute_reply":"2024-09-01T13:54:52.665574Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"MnistModel(\n  (linear1): Linear(in_features=784, out_features=32, bias=True)\n  (linear2): Linear(in_features=32, out_features=10, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"m1_history1 = fit(5,0.0178878518656460,m1,train_loader,val_loader) ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:54:52.667961Z","iopub.execute_input":"2024-09-01T13:54:52.668316Z","iopub.status.idle":"2024-09-01T13:55:12.950645Z","shell.execute_reply.started":"2024-09-01T13:54:52.668253Z","shell.execute_reply":"2024-09-01T13:55:12.949319Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.8788, val_acc: 0.8348\nEpoch [1], val_loss: 0.5237, val_acc: 0.8715\nEpoch [2], val_loss: 0.4340, val_acc: 0.8843\nEpoch [3], val_loss: 0.3937, val_acc: 0.8908\nEpoch [4], val_loss: 0.3697, val_acc: 0.8988\n","output_type":"stream"}]},{"cell_type":"code","source":"m1_history2 = fit(5,0.0178878518656460,m1,train_loader,val_loader) ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:55:12.952287Z","iopub.execute_input":"2024-09-01T13:55:12.952699Z","iopub.status.idle":"2024-09-01T13:55:33.081978Z","shell.execute_reply.started":"2024-09-01T13:55:12.952660Z","shell.execute_reply":"2024-09-01T13:55:33.080676Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.3527, val_acc: 0.9011\nEpoch [1], val_loss: 0.3397, val_acc: 0.9065\nEpoch [2], val_loss: 0.3303, val_acc: 0.9073\nEpoch [3], val_loss: 0.3220, val_acc: 0.9114\nEpoch [4], val_loss: 0.3154, val_acc: 0.9130\n","output_type":"stream"}]},{"cell_type":"code","source":"m1_history3 = fit(5,0.0178878518656460,m1,train_loader,val_loader) ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:55:33.084055Z","iopub.execute_input":"2024-09-01T13:55:33.084477Z","iopub.status.idle":"2024-09-01T13:55:53.205280Z","shell.execute_reply.started":"2024-09-01T13:55:33.084434Z","shell.execute_reply":"2024-09-01T13:55:53.204084Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.3086, val_acc: 0.9146\nEpoch [1], val_loss: 0.3036, val_acc: 0.9149\nEpoch [2], val_loss: 0.2990, val_acc: 0.9176\nEpoch [3], val_loss: 0.2936, val_acc: 0.9187\nEpoch [4], val_loss: 0.2883, val_acc: 0.9207\n","output_type":"stream"}]},{"cell_type":"code","source":"m1_history4 = fit(5,0.0178878518656460,m1,train_loader,val_loader) ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:55:53.207022Z","iopub.execute_input":"2024-09-01T13:55:53.207422Z","iopub.status.idle":"2024-09-01T13:56:13.713571Z","shell.execute_reply.started":"2024-09-01T13:55:53.207349Z","shell.execute_reply":"2024-09-01T13:56:13.712317Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.2850, val_acc: 0.9221\nEpoch [1], val_loss: 0.2791, val_acc: 0.9230\nEpoch [2], val_loss: 0.2744, val_acc: 0.9254\nEpoch [3], val_loss: 0.2709, val_acc: 0.9243\nEpoch [4], val_loss: 0.2664, val_acc: 0.9260\n","output_type":"stream"}]},{"cell_type":"code","source":"m2 = MnistModel(input_size, hidden_size=hidden_size, out_size=num_classes)\nto_device(m2, device)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:56:13.715662Z","iopub.execute_input":"2024-09-01T13:56:13.716669Z","iopub.status.idle":"2024-09-01T13:56:13.725831Z","shell.execute_reply.started":"2024-09-01T13:56:13.716615Z","shell.execute_reply":"2024-09-01T13:56:13.724744Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"MnistModel(\n  (linear1): Linear(in_features=784, out_features=32, bias=True)\n  (linear2): Linear(in_features=32, out_features=10, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"m2_history1 = fit(5,0.09833396206168134,m2,train_loader,val_loader) ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:56:13.727171Z","iopub.execute_input":"2024-09-01T13:56:13.727548Z","iopub.status.idle":"2024-09-01T13:56:33.875051Z","shell.execute_reply.started":"2024-09-01T13:56:13.727512Z","shell.execute_reply":"2024-09-01T13:56:33.873742Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.3741, val_acc: 0.8944\nEpoch [1], val_loss: 0.3065, val_acc: 0.9164\nEpoch [2], val_loss: 0.2797, val_acc: 0.9237\nEpoch [3], val_loss: 0.2634, val_acc: 0.9240\nEpoch [4], val_loss: 0.2385, val_acc: 0.9326\n","output_type":"stream"}]},{"cell_type":"code","source":"m2_history2 = fit(5,0.09833396206168134,m2,train_loader,val_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:56:33.883060Z","iopub.execute_input":"2024-09-01T13:56:33.883480Z","iopub.status.idle":"2024-09-01T13:56:54.343371Z","shell.execute_reply.started":"2024-09-01T13:56:33.883438Z","shell.execute_reply":"2024-09-01T13:56:54.342056Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.2216, val_acc: 0.9387\nEpoch [1], val_loss: 0.2087, val_acc: 0.9412\nEpoch [2], val_loss: 0.2031, val_acc: 0.9435\nEpoch [3], val_loss: 0.1900, val_acc: 0.9451\nEpoch [4], val_loss: 0.1881, val_acc: 0.9461\n","output_type":"stream"}]},{"cell_type":"code","source":"m2_history3 = fit(5,0.09833396206168134,m2,train_loader,val_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:56:54.345442Z","iopub.execute_input":"2024-09-01T13:56:54.346474Z","iopub.status.idle":"2024-09-01T13:57:15.806681Z","shell.execute_reply.started":"2024-09-01T13:56:54.346415Z","shell.execute_reply":"2024-09-01T13:57:15.805398Z"},"trusted":true},"execution_count":42,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.1749, val_acc: 0.9513\nEpoch [1], val_loss: 0.1694, val_acc: 0.9510\nEpoch [2], val_loss: 0.1674, val_acc: 0.9504\nEpoch [3], val_loss: 0.1642, val_acc: 0.9541\nEpoch [4], val_loss: 0.1587, val_acc: 0.9550\n","output_type":"stream"}]},{"cell_type":"code","source":"m2_history4 = fit(5,0.09833396206168134,m2,train_loader,val_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:57:15.808321Z","iopub.execute_input":"2024-09-01T13:57:15.808769Z","iopub.status.idle":"2024-09-01T13:57:35.682433Z","shell.execute_reply.started":"2024-09-01T13:57:15.808728Z","shell.execute_reply":"2024-09-01T13:57:35.681089Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.1646, val_acc: 0.9494\nEpoch [1], val_loss: 0.1536, val_acc: 0.9533\nEpoch [2], val_loss: 0.1475, val_acc: 0.9571\nEpoch [3], val_loss: 0.1481, val_acc: 0.9565\nEpoch [4], val_loss: 0.1415, val_acc: 0.9588\n","output_type":"stream"}]},{"cell_type":"code","source":"m1_history5 = fit(30,0.0178878518656460,m1,train_loader,val_loader) ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:57:35.684705Z","iopub.execute_input":"2024-09-01T13:57:35.685769Z","iopub.status.idle":"2024-09-01T13:59:36.734298Z","shell.execute_reply.started":"2024-09-01T13:57:35.685695Z","shell.execute_reply":"2024-09-01T13:59:36.732982Z"},"trusted":true},"execution_count":44,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.2619, val_acc: 0.9294\nEpoch [1], val_loss: 0.2585, val_acc: 0.9291\nEpoch [2], val_loss: 0.2553, val_acc: 0.9297\nEpoch [3], val_loss: 0.2502, val_acc: 0.9318\nEpoch [4], val_loss: 0.2475, val_acc: 0.9313\nEpoch [5], val_loss: 0.2437, val_acc: 0.9341\nEpoch [6], val_loss: 0.2397, val_acc: 0.9349\nEpoch [7], val_loss: 0.2386, val_acc: 0.9349\nEpoch [8], val_loss: 0.2336, val_acc: 0.9363\nEpoch [9], val_loss: 0.2309, val_acc: 0.9370\nEpoch [10], val_loss: 0.2279, val_acc: 0.9378\nEpoch [11], val_loss: 0.2261, val_acc: 0.9382\nEpoch [12], val_loss: 0.2237, val_acc: 0.9376\nEpoch [13], val_loss: 0.2213, val_acc: 0.9386\nEpoch [14], val_loss: 0.2191, val_acc: 0.9400\nEpoch [15], val_loss: 0.2161, val_acc: 0.9397\nEpoch [16], val_loss: 0.2142, val_acc: 0.9409\nEpoch [17], val_loss: 0.2120, val_acc: 0.9412\nEpoch [18], val_loss: 0.2107, val_acc: 0.9421\nEpoch [19], val_loss: 0.2091, val_acc: 0.9419\nEpoch [20], val_loss: 0.2072, val_acc: 0.9422\nEpoch [21], val_loss: 0.2046, val_acc: 0.9430\nEpoch [22], val_loss: 0.2025, val_acc: 0.9440\nEpoch [23], val_loss: 0.2012, val_acc: 0.9434\nEpoch [24], val_loss: 0.1998, val_acc: 0.9438\nEpoch [25], val_loss: 0.1985, val_acc: 0.9445\nEpoch [26], val_loss: 0.1969, val_acc: 0.9442\nEpoch [27], val_loss: 0.1956, val_acc: 0.9454\nEpoch [28], val_loss: 0.1938, val_acc: 0.9462\nEpoch [29], val_loss: 0.1924, val_acc: 0.9463\n","output_type":"stream"}]},{"cell_type":"code","source":"m2_history5 = fit(30,0.09833396206168134,m2,train_loader,val_loader) ","metadata":{"execution":{"iopub.status.busy":"2024-09-01T13:59:36.736598Z","iopub.execute_input":"2024-09-01T13:59:36.737753Z","iopub.status.idle":"2024-09-01T14:01:36.907647Z","shell.execute_reply.started":"2024-09-01T13:59:36.737693Z","shell.execute_reply":"2024-09-01T14:01:36.906435Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], val_loss: 0.1393, val_acc: 0.9585\nEpoch [1], val_loss: 0.1413, val_acc: 0.9579\nEpoch [2], val_loss: 0.1409, val_acc: 0.9586\nEpoch [3], val_loss: 0.1347, val_acc: 0.9597\nEpoch [4], val_loss: 0.1379, val_acc: 0.9598\nEpoch [5], val_loss: 0.1386, val_acc: 0.9593\nEpoch [6], val_loss: 0.1329, val_acc: 0.9610\nEpoch [7], val_loss: 0.1317, val_acc: 0.9621\nEpoch [8], val_loss: 0.1299, val_acc: 0.9616\nEpoch [9], val_loss: 0.1307, val_acc: 0.9624\nEpoch [10], val_loss: 0.1300, val_acc: 0.9612\nEpoch [11], val_loss: 0.1307, val_acc: 0.9623\nEpoch [12], val_loss: 0.1289, val_acc: 0.9640\nEpoch [13], val_loss: 0.1305, val_acc: 0.9618\nEpoch [14], val_loss: 0.1250, val_acc: 0.9650\nEpoch [15], val_loss: 0.1274, val_acc: 0.9640\nEpoch [16], val_loss: 0.1246, val_acc: 0.9640\nEpoch [17], val_loss: 0.1237, val_acc: 0.9646\nEpoch [18], val_loss: 0.1239, val_acc: 0.9639\nEpoch [19], val_loss: 0.1247, val_acc: 0.9642\nEpoch [20], val_loss: 0.1238, val_acc: 0.9649\nEpoch [21], val_loss: 0.1220, val_acc: 0.9641\nEpoch [22], val_loss: 0.1264, val_acc: 0.9637\nEpoch [23], val_loss: 0.1277, val_acc: 0.9637\nEpoch [24], val_loss: 0.1244, val_acc: 0.9636\nEpoch [25], val_loss: 0.1266, val_acc: 0.9631\nEpoch [26], val_loss: 0.1243, val_acc: 0.9643\nEpoch [27], val_loss: 0.1258, val_acc: 0.9639\nEpoch [28], val_loss: 0.1301, val_acc: 0.9632\nEpoch [29], val_loss: 0.1260, val_acc: 0.9636\n","output_type":"stream"}]},{"cell_type":"code","source":"history = m1_history1 +m1_history2 +m1_history3 +m1_history4 + m1_history5\naccuracies = [result['val_acc'] for result in history]\nplt.plot(accuracies, '-x')\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.title('Accuracy Compared To # of Epochs')","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:01:36.909778Z","iopub.execute_input":"2024-09-01T14:01:36.910730Z","iopub.status.idle":"2024-09-01T14:01:37.260975Z","shell.execute_reply.started":"2024-09-01T14:01:36.910669Z","shell.execute_reply":"2024-09-01T14:01:37.259903Z"},"trusted":true},"execution_count":46,"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Accuracy Compared To # of Epochs')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAAkAAAAHHCAYAAABXx+fLAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABkiUlEQVR4nO3dd1zU9eMH8NfdwR17yJQhIA5yb3KkqailUVqOynJUWoo56Fvhriyxvt/QcKT1y8qclSPLshBXKS4URw7ABaJM2Zu79+8P5KMnhwLCHeP1fDzuEXzu/fnc+z5A9/I9ZUIIASIiIqJGRG7oChARERHpGwMQERERNToMQERERNToMAARERFRo8MARERERI0OAxARERE1OgxARERE1OgwABEREVGjwwBEREREjQ4DEBFRFV27dg0ymQzfffedoauidzExMRg8eDCsra0hk8mwY8cOQ1epWsp+hv/73/8MXRUyEAYgqrdWrVoFmUwGX19fQ1elXkpKSsJ//vMf+Pj4wMzMDObm5ujatSs+/vhjZGRkGLp69Z6npydkMtlDHzUVon755RcYGRkhNzcXADBjxgw8+eSTNXLte40fPx5nz57FJ598gh9++AHdunXTWa4sYFT0WLJkSY3XjagqjAxdAaLq2rBhAzw9PXHs2DHExsaiRYsWhq5SvXH8+HEMHToUOTk5eOWVV9C1a1cAwIkTJ7BkyRIcPHgQf/31l4FrWb8tW7YMOTk50ve///47Nm3ahKVLl8Le3l463qtXrxp5vaNHj6J9+/YwNzcHAERERGDAgAE1cu0y+fn5iIiIwNy5czFt2rRKnfPSSy9h6NCh5Y537ty5RutGVFUMQFQvXb16FYcPH8a2bdvw5ptvYsOGDVi4cKGhq6VTbm6u9KFUF2RkZGDEiBFQKBQ4deoUfHx8tJ7/5JNP8PXXXxuodrVLCIGCggKYmprW+msNHz5c6/vExERs2rQJw4cPh6enZ42/3rFjx/D4448DAAoKChAVFYXZs2fX6GukpKQAAGxsbCp9TpcuXfDKK6/UaD2IagK7wKhe2rBhA2xtbTFs2DCMHDkSGzZs0FkuIyMDs2bNgqenJ1QqFdzc3DBu3DikpqZKZQoKCvDBBx+gVatWMDExQdOmTfH888/j8uXLAID9+/dDJpNh//79WtfWNQ5kwoQJsLCwwOXLlzF06FBYWlpi7NixAIC///4bo0aNQrNmzaBSqeDu7o5Zs2YhPz+/XL0vXryI0aNHw8HBAaampmjdujXmzp0LANi3bx9kMhm2b99e7ryNGzdCJpMhIiKiwnu3Zs0aJCQkICQkpFz4AQAnJyfMmzdP69iqVavQtm1bqFQquLi4ICAgoFw32ZNPPol27drhzJkz6NevH8zMzNCiRQv8/PPPAIADBw7A19dXej979uzROv+DDz6ATCaT3ruVlRXs7OwwY8YMFBQUaJX99ttvMWDAADg6OkKlUqFNmzb48ssvy70XT09PPPPMM/jzzz/RrVs3mJqaYs2aNQBKfzdmzpwJd3d3qFQqtGjRAp9++ik0Go3WNTIyMjBhwgRYW1vDxsYG48ePr7EuwpKSEixatAje3t5QqVTw9PTEnDlzUFhYWKnzU1NTpceJEyfQpk0bpKamYt++fSguLoa3tzdSU1ORl5f30GudOnUKTz/9NKysrGBhYYGBAwfiyJEj0vMffPABPDw8AADvvvsuZDJZjQW5sp/TX3/9hU6dOsHExARt2rTBtm3bypW9cuUKRo0ahSZNmsDMzAyPP/44du3aVa7cw/6u7/XVV19JP4Pu3bvj+PHjWs8nJiZi4sSJcHNzg0qlQtOmTfHcc8/h2rVrNfL+yUAEUT3k4+MjXn/9dSGEEAcPHhQAxLFjx7TKZGdni3bt2gmFQiEmTZokvvzyS7Fo0SLRvXt3cerUKSGEECUlJWLgwIECgHjxxRfFihUrRHBwsBgwYIDYsWOHEEKIffv2CQBi3759Wte/evWqACC+/fZb6dj48eOFSqUS3t7eYvz48WL16tVi3bp1Qggh3n77bTF06FCxePFisWbNGvH6668LhUIhRo4cqXXd06dPCysrK2FnZydmz54t1qxZI9577z3Rvn17IYQQGo1GuLu7ixdeeKHcfRk6dKjw9vZ+4L3r1auXMDU1FYWFhQ++yXcsXLhQABB+fn5i+fLlYtq0aUKhUIju3buLoqIiqVy/fv2Ei4uLcHd3F++++65Yvny5aNOmjVAoFGLz5s3C2dlZfPDBB2LZsmXC1dVVWFtbi6ysrHKv0759e+Hv7y9WrFghXnnlFQFAvPrqq1p16t69u5gwYYJYunSpWL58uRg8eLAAIFasWKFVzsPDQ7Ro0ULY2tqKoKAgsXr1arFv3z6Rm5srOnToIOzs7MScOXPE6tWrxbhx44RMJhMzZsyQztdoNKJv375CLpeLqVOniuXLl4sBAwaIDh06lPvZP8x///tfAUBcvXpVOjZ+/HgBQIwcOVKsXLlSjBs3TgAQw4cPr9Q1AVTqsXDhwgde59y5c8Lc3Fw0bdpULFq0SCxZskR4eXkJlUoljhw5IoQo/b1cunSpACBeeukl8cMPP4jt27dXeM2yv48PP/xQpKSklHsUFxdLZT08PESrVq2EjY2NCAoKEiEhIaJ9+/ZCLpeLv/76SyqXmJgonJychKWlpZg7d64ICQkRHTt2FHK5XGzbtk0qV5m/67L6de7cWbRo0UJ8+umn4rPPPhP29vbCzc1N63e7V69ewtraWsybN0/83//9n1i8eLHo37+/OHDgQKV+TlQ3MQBRvXPixAkBQISFhQkhSj+k3NzctD64hBBiwYIFAoDW/xjLaDQaIYQQa9euFQBESEhIhWWqGoAAiKCgoHLXy8vLK3csODhYyGQycf36delY3759haWlpdaxe+sjhBCzZ88WKpVKZGRkSMeSk5OFkZHRQz/sbG1tRceOHR9Y5t5rKpVKMXjwYKFWq6XjK1asEADE2rVrpWP9+vUTAMTGjRulYxcvXhQAhFwulz5IhRDizz//LHfvygLQs88+q1WHqVOnCgDi9OnT0jFd93LIkCGiefPmWsc8PDwEALF7926t44sWLRLm5uYiOjpa63hQUJBQKBQiLi5OCCHEjh07BADx2WefSWVKSkrEE0888cgBKCoqSgAQb7zxhla5//znPwKA2Lt370OvGRYWJsLCwsTkyZOFk5OT9H3nzp3FM888I31/+fLlB15n+PDhQqlUapW7efOmsLS0FH379pWOlf3O//e//31o3crKVvSIiIiQypb9nLZu3Sody8zMFE2bNhWdO3eWjs2cOVMAEH///bd0LDs7W3h5eQlPT0/pd7Qyf9dl9bOzsxO3b9+Wnv/ll18EAPHrr78KIYRIT0+v9Hum+oUBiOqdWbNmCScnJ1FSUiIde+edd8oda9u27UM/6IcNGybs7e21/jV6v+oEoPvDy/1ycnJESkqKOHDggAAg/as0OTlZACgX5u534cIFAUD83//9n3Rs+fLlAoCIiYl54LkKhUL06dPngWXKbNy4UQAQv//+u9bxwsJCYWVlpdUK1a9fP2FhYaEV1IQQwsbGRrRt21brWEZGhgAg5s+fLx0rC0B//vmnzvcaHByss44ZGRkiJSVFLF68WADQCoUeHh7Cy8ur3DkdOnQQTz31VLlWiT179ggAYv369UIIISZPniyMjIxEdna21vk//vjjIwegsvqeP39eq9ytW7cEAPHOO+9U+tojRowQL730khCiNKBZWVmJ7777rlLnlpSUCDMzMzF69Ohyz7355ptCLpeLzMxMIUT1AtDkyZOlIHbvo+yaQpT+nFxcXMr97rz//vsCgLh165YQQohWrVqJHj16lHut4OBgAUCcPXtWCFG5v+uy+k2dOlXr+O3btwUA8cUXXwghhCgoKBBKpVIMGzZMKyhR/ccxQFSvqNVqbN68Gf3798fVq1cRGxuL2NhY+Pr6IikpCeHh4VLZy5cvo127dg+83uXLl9G6dWsYGdXcfAAjIyO4ubmVOx4XF4cJEyagSZMmsLCwgIODA/r16wcAyMzMBFA6vgHAQ+vt4+OD7t27a4192rBhAx5//PGHzoazsrJCdnZ2pd7L9evXAQCtW7fWOq5UKtG8eXPp+TJubm6QyWRax6ytreHu7l7uGACkp6eXe82WLVtqfe/t7Q25XK413uLQoUPw8/ODubk5bGxs4ODggDlz5gC4ey/LeHl5lXuNmJgY7N69Gw4ODloPPz8/AEBycrL0/ps2bQoLCwut8++/H9Vx/fp1yOXycj8vZ2dn2NjYlLu390tPT0dqaipSUlJw4MABdOvWDampqThw4ACysrLQvn17pKamas1E0yUlJQV5eXk639Njjz0GjUaD+Pj4qr/BO1q2bAk/P79yDysrK61yLVq0KPe706pVKwCQfvbXr1+vsJ5lzwNV+7tu1qyZ1ve2trYA7v5uqlQqfPrpp/jjjz/g5OSEvn374rPPPkNiYuJDr011G2eBUb2yd+9e3Lp1C5s3b8bmzZvLPb9hwwYMHjy4Rl/z/v8pl1Gr1TqPq1QqyOXycmUHDRqE27dv4/3334ePjw/Mzc2RkJCACRMmlBt4Wxnjxo3DjBkzcOPGDRQWFuLIkSNYsWLFQ8/z8fFBVFQUioqKoFQqq/y6D6JQKKp0XAjx0Gvef/8vX76MgQMHwsfHByEhIXB3d4dSqcTvv/+OpUuXlruXumZ8aTQaDBo0CO+9957O1yz74NWHin6/HqZz585aIemdd97BO++8I31ftrTB+PHjG+WCjZVVmd/NmTNnwt/fHzt27MCff/6J+fPnIzg4GHv37uV0/nqMAYjqlQ0bNsDR0RErV64s99y2bduwfft2rF69GqampvD29sa5c+ceeD1vb28cPXoUxcXFMDY21lmm7F+E98/8edi/0O919uxZREdH4/vvv8e4ceOk42FhYVrlmjdvDgAPrTcAvPjiiwgMDMSmTZuQn58PY2NjjBkz5qHn+fv7IyIiAlu3bsVLL730wLJls34uXbok1Q0AioqKcPXqVanFpCbFxMRotdrExsZCo9FIM45+/fVXFBYWYufOnVr/et+3b1+lX8Pb2xs5OTkPrb+HhwfCw8ORk5Oj1Qp06dKlSr/Wg66t0WgQExMjtWAApQtUZmRkSPe+Ihs2bEB+fj527NiBH3/8ERs3bgQAzJ07F/b29pg1axYAwMXF5YHXcXBwgJmZmc73dPHiRcjl8nIteLUhNjYWQgitQBgdHQ0A0s/ew8OjwnqWPQ9U7u+6qry9vaWQGRMTg06dOuHzzz/H+vXra+T6pH/sAqN6Iz8/H9u2bcMzzzyDkSNHlntMmzYN2dnZ2LlzJwDghRdewOnTp3VOFy/7190LL7yA1NRUnS0nZWU8PDygUChw8OBBredXrVpV6bqX/Svz3n9VCiHwxRdfaJVzcHBA3759sXbtWsTFxemsTxl7e3s8/fTTWL9+PTZs2ICnnnpKa4G9irz11lto2rQp3nnnHekD5l7Jycn4+OOPAQB+fn5QKpUIDQ3Vev1vvvkGmZmZGDZs2ENfr6ruD7fLly8HADz99NMAdN/LzMxMfPvtt5V+jdGjRyMiIgJ//vlnuecyMjJQUlICABg6dChKSkq0ptir1WqpTo+ibHHAZcuWaR0PCQkBgIfe2969e8PPzw/Z2dno1auX1LUUFxcHf39/6fs2bdo88DoKhQKDBw/GL7/8otXNmJSUhI0bN6JPnz7luqtqw82bN7X+VrOysrBu3Tp06tQJzs7OAErv2bFjx7SWecjNzcVXX30FT09P6b1W5u+6svLy8sotw+Dt7Q1LS8tKL1dAdRNbgKje2LlzJ7Kzs/Hss8/qfP7xxx+Hg4MDNmzYgDFjxuDdd9/Fzz//jFGjRuG1115D165dcfv2bezcuROrV69Gx44dMW7cOKxbtw6BgYE4duwYnnjiCeTm5mLPnj2YOnUqnnvuOVhbW2PUqFFYvnw5ZDIZvL298dtvv0njRCrDx8cH3t7e+M9//oOEhARYWVlh69atOsfAhIaGok+fPujSpQsmT54MLy8vXLt2Dbt27UJUVJRW2XHjxmHkyJEAgEWLFlWqLra2tti+fTuGDh2KTp06aa0EffLkSWzatAk9e/YEUBrIZs+ejQ8//BBPPfUUnn32WVy6dAmrVq1C9+7da2WBu6tXr+LZZ5/FU089hYiICKxfvx4vv/wyOnbsCAAYPHgwlEol/P398eabbyInJwdff/01HB0dcevWrUq9xrvvvoudO3fimWeewYQJE9C1a1fk5ubi7Nmz+Pnnn3Ht2jXY29vD398fvXv3RlBQEK5duyatTXP/OKPq6NixI8aPH4+vvvoKGRkZ6NevH44dO4bvv/8ew4cPR//+/St1nUOHDmHy5MkASseQJSYmVnl16Y8//hhhYWHo06cPpk6dCiMjI6xZswaFhYX47LPPqvze7nXy5EmdrSTe3t7S7xlQ2u34+uuv4/jx43BycsLatWuRlJSkFWyDgoKwadMmPP3005g+fTqaNGmC77//HlevXsXWrVulrufK/F1XVnR0NAYOHIjRo0ejTZs2MDIywvbt25GUlIQXX3zxEe4MGZyBBl8TVZm/v78wMTERubm5FZaZMGGCMDY2FqmpqUIIIdLS0sS0adOEq6urUCqVws3NTYwfP156XojSKdVz584VXl5ewtjYWDg7O4uRI0dqTQlOSUkRL7zwgjAzMxO2trbizTffFOfOndM5C8zc3Fxn3c6fPy/8/PyEhYWFsLe3F5MmTRKnT5/WOZvo3LlzYsSIEcLGxkaYmJiI1q1ba82YKlNYWChsbW2FtbW1yM/Pr8xtlNy8eVPMmjVLtGrVSpiYmAgzMzPRtWtX8cknn2jN0BGidNq7j4+PMDY2Fk5OTmLKlCkiPT1dq0y/fv3KzfYSonSGz7Bhw8odByACAgKk78tmgZ0/f16MHDlSWFpaCltbWzFt2rRy723nzp2iQ4cOwsTERHh6eopPP/1Umvp87zo7Fb22EKXTp2fPni1atGghlEqlsLe3F7169RL/+9//tNaASUtLE6+++qqwsrIS1tbW4tVXXxWnTp2qkXWAiouLxYcffij97rm7u4vZs2eLgoKCSl0zMTFRa1r4+vXrhaWlpdaSBZV18uRJMWTIEGFhYSHMzMxE//79xeHDh7XK1OQ0+PHjx0tly35Of/75p+jQoYNQqVTCx8dH/PTTT+Wue/nyZTFy5Ejpb6NHjx7it99+K1fuYX/XD3ovuGftpNTUVBEQECB8fHyEubm5sLa2Fr6+vuLHH3986D2guk0mRBXbA4mozigpKYGLiwv8/f3xzTffGLo6j+SDDz7Ahx9+iJSUlEp15VHD4enpiXbt2uG3334zdFWoEeEYIKJ6bMeOHUhJSdEaWE1ERA/HMUBE9dDRo0dx5swZLFq0CJ07d5bWEyIiosphCxBRPfTll19iypQpcHR0xLp16wxdHSKieodjgIiIiKjRYQsQERERNToMQERERNTocBC0DhqNBjdv3oSlpWW19+khIiIi/RJCIDs7Gy4uLuX2ZLwfA5AON2/e1MveN0RERFTz4uPj4ebm9sAyDEA6WFpaAii9gfrYA4eIiIgeXVZWFtzd3aXP8QdhANKhrNvLysqKAYiIiKieqczwFQ6CJiIiokaHAYiIiIgaHQYgIiIianQYgIiIiKjRYQAiIiKiRocBiIiIiBodBiAiIiJqdBiAiIiIqNFhACIiIqJGhwGIiIiIGh0GICIiIqq2pWHRCA2P0flcaHgMloZFV6mcvjAAERERUbUp5DKE6Ag3oeExCAmLhkIuq1I5feFmqERERFRt0we2BACE3GnBmT6wpRRqAge1wvSBLSGEwFv9vFFYokZIWDSyCorxZl9vbDoWp1VOn2RCCKHXV6wHsrKyYG1tjczMTO4GT0REjdbSOy0zusJJaHgM1BqBWYNa4UZ6Hj769Tz+Op8EGQABwFylgLFCjsJiDQpK1Lg/bchlgEagRsNPVT6/2QJEREREOpV1WwHQCinBv1/AmoNX0M7VCttPJSDudp70XFnOyS1UA1BXeG2NAJQKud5bfsowABERETUwlW25eZh7u7eupeXCXGmE387cRHpeMQDgXEIWgNKg5Gipwq3MAhjJZSjRCIz1bYaJvb2gMpJDZSyHykgBlZEcaw5cxtI9MVAq5ChSaxAaHmOQEMQARERE1MBU1HJz79icyoSk57u4olitgYXKCNtOJmiVaedqhV7e9ujZ3A6R19OxYl+s1J1V9jpOViblXn/pnphy5e6vpz4wABEREdWymmqRqazKDEyuKHx8/tclLN8bCzdbU3yhY9q6kVyGyHmDYG1mLNX/3vBT2devqJy+MAARERHVssq0yFRWZcLUm/2ao5O7Dbp72iIkLBpLw6IhAHRyt4ZCLsOPx+PR3s0aY32bISQsGhoh8GRrR8z/5RzO3sgEANxIz4dMBjzR0gGWKiPsOntL6rb6PuKa9PpqjdA5kPne56tSTl84C0wHzgIjIqKaVhZ2xvX0QP/WjjhyJQ1rDl6RQkFlW4l0taQUFKsxf8c5/BR5A642JkjOLkSxuvof7262phjdzR0vdHXD1sgbOluODDF1/WE4C4yIiEhPKhNcRnZ1g5FCBnsLJdZFXMe6iOsAAGtTY1xJycG6iGtIzSnEhqNxACpuJRJC4GXfZriVmY+QsGhEXE6DTAYcvXpbakFJyCgAALhYm8DGTInzt7Kkgck9PG3hYWeO5OxCpGQXIjm7EGm5hdIUdbkMWP+6Lx5vbge5XFbnuq1qEgMQERHRI6ioe2vJHxew+sAVuFib6BxLAwCZ+cXYEXUTO6JuAigdXxMSFo1/YlLwsq8Htp+6gQPRqfCyN8evp2/iy/2XkV98d2p5xJU06WszpQJ+jzmhl7cdenrbYcepBJ0Djvu0dMB/R3WUzlsWFo1l4TEwVshQrBY4cT0dvVrYA6h73VY1iQGIiIioAlUZvBwSFo2iEg28Hc3xxZ4YXEsrXRvnZmYBZDKgl7cdzJVG+Ot8kjSW5vkurmjWxAwn4zJwKi4d2QUlAIBj19Jx7Fq69FpXU3Olr2UywMnSBO5NTBF5PR0aARgrZPj3wyGQyWRS3e4NP0DFA5OXhVc8K+tBA7Pra8tPGQYgIiJqUCobWipT7mGDl6cPaIHDsakoKtHAxdoEK/bFal2no5s1nu3kimc6NMWW4/EVjqVZ91oPaDQCsSk5OHk9HXO2n4VGlHZJvdnPG262pnC3NYN7EzO42JhAZaRAaHgMjl9Ll8LU8r2xVRqY3JC7tyqDAYiIiBqUys64qky5+wPBW/28MW/HOfx4Ih5uNqZYfeAKQvdqhx4AUMhkCAvsi+YOFhVeU1fYaOVkid3nEqVVkovUGpgaKzDW10Pr+g+b0l6ZlpulFQxkbgjdW5XBAERERPVGVbuk4m7nwcfZEkeupGHPhWQ838UV/Vo54GpqLsb6NoNaI6Tg8PaAFvjvn5ewav9ljOzqBvcmpvjq4GVk5RejtbMlQsKipbIAcCMjHwDgbGWCnt52yC0s0ere+u3MrSpPFa/MWj011XLTkLu3KoPT4HXgNHgiIv2rSpfU/WGiLBRMesILzR0ssO9iMvZdSq7UVPCywb9VMaxD09LBxs3t4GVvjuV7Yx95qnhF59x/XN+LKtYnnAZPRET1TnW6pKY86Y0528/ipxM3YG+hxNd/X9V5bZkM6O7ZBFn5xcguKEFmfjFyCksHHN8ffqxNjeFoqYKjlQoOFio4Wpng4q0sHIxJlcJSaydLqVuqplpkKttK1NhbbmoKAxAREdUJ94eGgP4t8Nnui1hz8ApGdHaFs7UJVu6Lxe3cIrRytCjXJZWaUwSZDOjsboP+rR2RmFWADUfjpC6pPi3stQJCiVqD7IISLN8bg7WHrknh5vU+XuUC2MGY1Aq7pWpqqjiDjX7ViQC0cuVK/Pe//0ViYiI6duyI5cuXo0ePHjrLFhcXIzg4GN9//z0SEhLQunVrfPrpp3jqqad0ll+yZAlmz56NGTNmYNmyZbX4LoiIGqea7JJ52bcZIq/fLhdutp9KwPZTCRWeN6KzK55s7YC+LR1ga65EaHgMNhyNe+BYGiOFHD8cuY61h65VWK4yrTsMLvWTwQPQli1bEBgYiNWrV8PX1xfLli3DkCFDcOnSJTg6OpYrP2/ePKxfvx5ff/01fHx88Oeff2LEiBE4fPgwOnfurFX2+PHjWLNmDTp06KCvt0NE1Og86s7jy8KicSU1B4UlGoRfSEbJfS0m9hZKOFiawNFSBQdLFRwtVTh/Kwv7L6VIKxx72ZvjuU6u5V73UTfnbMgLATZ2Bg9AISEhmDRpEiZOnAgAWL16NXbt2oW1a9ciKCioXPkffvgBc+fOxdChQwEAU6ZMwZ49e/D5559j/fr1UrmcnByMHTsWX3/9NT7++GP9vBkiokbo3tBwIz0fY32b4bczN/H131cf2AJzJSUH7289g+P3LPgHlM6qSswqkLqkxvX0LBes9l9KeeQuqcqUY+tOw2XQAFRUVITIyEjMnj1bOiaXy+Hn54eIiAid5xQWFsLExETrmKmpKf755x+tYwEBARg2bBj8/PweGoAKCwtRWFgofZ+VlVXVt0JE1GgVFKtha2YMSxMj/HgiHj+eiJee+/bQVew6cwsOlio81rR0KvnRq2koKtFoBZ8m5kqM6OyKYrUG6yKu66VLiuGmcTNoAEpNTYVarYaTk5PWcScnJ1y8eFHnOUOGDEFISAj69u0Lb29vhIeHY9u2bVCr7+6NsnnzZpw8eRLHjx+vVD2Cg4Px4YcfVv+NEBE1QA8b21NQrIaNmTG+/vsqUrILdVwBSM8rRnpeMS4lZUvHDsXe3b/Ky94c7z/VGgN8nLD6wGV2SZHeGLwLrKq++OILTJo0CT4+PpDJZPD29sbEiROxdu1aAEB8fDxmzJiBsLCwci1FFZk9ezYCAwOl77OysuDu7l4r9Sciqm01NSi5orE9n+2+iFX7L8PEWI6CYg2A0p3HWztbYt+lFGnW1ZR+3nius0vpruNZhUjJKf3vd4evSvtX7fvPk9J12SVF+mTQAGRvbw+FQoGkpCSt40lJSXB2dtZ5joODA3bs2IGCggKkpaXBxcUFQUFBaN68OQAgMjISycnJ6NKli3SOWq3GwYMHsWLFChQWFkKhUGhdU6VSQaVS1fC7IyIyjMpuBfEw97e+vNSjGaZsiMSJO11XBcUaeNmbY8qT3khIz8cXOjbVNFUqytXh3m0eQsNjpOcZbkifDBqAlEolunbtivDwcAwfPhwAoNFoEB4ejmnTpj3wXBMTE7i6uqK4uBhbt27F6NGjAQADBw7E2bNntcpOnDgRPj4+eP/998uFHyKi+qSqW0EAusfOVPY6r/fxQnRidrlp6T7Olgjo3wJD2zfFyn2xWuGn7DUfVgddA6OJ9MXgXWCBgYEYP348unXrhh49emDZsmXIzc2VZoWNGzcOrq6uCA4OBgAcPXoUCQkJ6NSpExISEvDBBx9Ao9HgvffeAwBYWlqiXbt2Wq9hbm4OOzu7cseJiOqbh7XuvNbbE3/HpMDBUoUenrYICYvGsj3R0AhgTHd3vNbHq1LXGdzGCW98fwIHY1JQVKKRnpcB+L/x3TDAxxEymQwAdx6n+sngAWjMmDFISUnBggULkJiYiE6dOmH37t3SwOi4uDjI5XKpfEFBAebNm4crV67AwsICQ4cOxQ8//AAbGxsDvQMioppR2VaZsg08j15Jg5O1CY5euY2EOxtzrj10DWsPXdM6t2xc8JbjpTO0PO3M0cbFCn1a2CEkLBp5RSWY2NsLs7edwd6LKZDJgL/O3x2aYGNqjIz8YmnNnX9vZmHgY3cnr3DncaqPuBmqDtwMlYgMoaLNMJeFRWNZeAz6tLCDTCbDiWvpyC9W67yGibEcbrZmcLc1xe3cIpy+kQm5rDQEWaiMpP2vHsbH2RJPtXNGWm4RftAxLb0qm3wS6Qs3QyUiqkMq27Jzb5dQUlYBvOzNsfFoHK6k5gIA/rln+riduRLpeUXQiNLurJ/e6gl3WzPYWyghk8kqHG/zVr/m6OVtj39vZuHfm5k4fzNLur4MwOyhPhjS1hkeduYIDY/RCj8Au62o4WAAIiKqZQ8bbzP1SW/su5iMk3HpiLyeDmOFDBuOxmldw8rECI83t0Mvbzv09LbH7nO3sHRPjDSb6p+YVOnaDxtvY6Y0Kle2bNXlgmINPOzMAXDNHWrYGICIiGrZveFDCIGh7Zvis90XEXYhGbZmxli1/zKAyzrPVchl+CWgNx5ragWFvHTQcWh4DJbuKT/lvOy1KhtcHjYri9PSqSFjACIi0oOA/i1wKTEbS/eUhpcy6XnFAIDm9ubo3MwWXTxscDExGz9EXJdad/ZeTEY7V2sAldvoszLBhbOyqLFjACIiqkBlxu4AeGCZYrUGzZqY4csDl3ElJVd6TgZgan9vdGlmi87NbNHEXCmdo2vQMVC11p2HYfcWNXYMQEREFajsisq6yoT8dQmhe2NhaWKE7ILSmVcqIzkKSzTSeBuVkUJrOnlNbvT5MOzeosaOAYiIqAKVWc24TFmZ1/p4Ycr6SPwdkwoAyC4ogb1F6U7of8ekPnAVZLbKEOkP1wHSgesAETV8lZ2anphZgA9//Rd/nEuETAYIUTpep7mDudY5V1JypenkZVxtTPFmv+ZIzS5E6N7YcuGGa+oQ1SyuA0RE9BAVdW8t+eMCVh+4gvZu1vj19E2tUFP2z8UrqeXDzv0+G9kBIzq7wlgh5yrIRHUQAxARNUr3dm9dS8uFlYkxfj19E2m5RQCAszcyAQByGeBgqUJSViEUchnUGoFBbRzhd8/YHQDYcyEJYeeTpe0iEjMLYKwo3caH422I6h4GICJqtAL6t0D4hSRsO5mgdfyxplbo2dwOPb3tcCouHav2Xy43dqe9q43WlPKw88nc5ZyoHmEAIqJGqaBYjZmbo3D6TksPABjJZTg2109rSvq94QcoPzC67Guup0NUvzAAEVGjk5lXjDfWHcfxa+lQyGRQCyEtOrj+yPUqz8ri+B6i+oezwHTgLDCiuqmyM7ce5GZGPiZ8ewzRSTlQGslRVKLhTudEDQRngRFRg1TZhQkrcikxG+PXHkNiVgHMVQrkFqrZdUXUSDEAEVG9UdmFCXW1FB29koZJ604gq6AEtmbGGNHZFTZmSnZdETVSDEBEVK/cG4KW7YmGRgCjurrhpR7NIISATCYr11L0x9lbmLElCkUlGgDASz2a4b2nfB76GkTUcDEAEVG9UqzWoFhdGmTKGml+iryBnyJvwNrUGC0cLdDCwQJ9W9ojJCwakddv42BMqrSI4fQBLRA4uLWBak9EdQUDEBHVG1dScjBry92p62VbU1iZlm44mplfjMjr6Yi8ni6dcyA6Vfp6pl9LzPR78DghImocGICIqM4TQmDTsXgs+u088ovVAIBh7Zti5dgu0hig6QNa4Kl2TRGbkoPY5BxcTi7976WkbACAUiFn+CEiCQMQEdUJFU1xT80pxOjVEVp7b016wgtzh7UBoD0myEghLzc77FJYtrTGT2h4DMf3EBEABiAiekQ1sTYPoHuK+96LSZi28RTyitRQyGTo1cIO3TxsMeO+lhxdM7funx3G7SmI6F4MQET0SCqzNk9VQlJIWDSK1Rqk5xVh/ZE4AICduRLr3/DFY00rXtisotfmGj9EpAsDEBE9knuDRUZeEV729cD2Uzewcl/5DUTvLQ/cDSpjurvju0NXEX87D/YWKizfGyuV6dLMBhsnPQ4TY0Wl61TZLSyIqPHiVhg6cCsMoqqbvO4E/jqfJH1vJJehqY0JHCxUcLQ0QWJWPqLiMzHoMUd09rDFjlMJiE7KeeA1jeQyxC4eWttVJ6IGglthEJFe7buUjPCLyVrHSjQC8bfzEX87X+t42IVkhF3QLutsZYK2LlZo62qNa6m52Hn6JgcuE1GtYgAiokdyOj4DU9eflLqVyoLL67298HR7Z6RkFyI5u/DOfwvwU+QNCAEoZDJ8O7E72rpYwc5CBaC0S2zn6ZscuExEtY4BiIiq7VpqLl777ri0Ns+MgS0xa1ArKbhYmxmXG/MjxN2QFBWfgb6tHKTnOHCZiPSFAYiIqiU1pxDjvz2GtNwiAMC0/i2kmVyV2bT0/tYdDlwmIn1iACKiKsstLMFr3x3H9bQ8WJkY4aUezfCfIdr7a90bXCrTuvOgtYLY8kNENY0BiIiqpFitwdQNJ3HmRiaamCvx81s90dzBQmfZsuCy9L7wc//zbN0hIn1jACKiCt2/gKEQAkFbz+JAdAqM5DIMesyxwvBzL7buEFFdIzd0BYio7ipb5Tk0PAYA8L+/LmHryRuQyUqnubvamhm4hkRE1cMWIKIGpqb25gK0x+lExadj78UUAIAQ0NmlRURUX7AFiKiBub/VpkzZQGSFXFal673WxwuPezWRwg/A8ENE9R9bgIgamHtbbUrUGkzs7YUfjlwvNwvrYYrVGmw6FofQ8Bik5hRJx5UKOcMPEdV7DEBEDdD0gS2RmFWA0L2xCL2zseigxxwxvqcngAd3k32xJxqXErNx/lYWrqXlAQBszIyRkVfM7SmIqMFgACJqYIQQWH80Dj+fuKF1POxCMrp9EoYnWztCqZBj19lbALRnYb3782n8dM959hZKdHCzxt6LKdyegogaFAYgogYkr6gEc7adxY6om9IxY4UMxWoBewslUnOKEHZnx3ZjRelYoaupuZj0RHMEbDyJq6m5AAAzpQKTnmgOtUZgxb5Ybk9BRA0OAxBRAxGbnIMp6yMRk5wDmax0ptYsv5aY4Xd3b65Xe3rAUmWEX6JuIiGjdJf27acSsP1UAgBAJgPG+jbD9IEt4WhpwgUMiajBkgkh+H+w+2RlZcHa2hqZmZmwsrIydHWIJBWN3fn19E0E/hiFYrWAuVKB3CJ1ueBy73YUbw9ogZNx6fgl6ibWRVwHUBp+wgP7VWphQyKiuqgqn99sASKqR8qmuAOlrTBFJRos/v0Cvjt8DQDgbmuKIe2cYWVi/MBWG5lMhq4eTXAoNg3A3W6y387cYpcWETUKDEBE9ci942+yCopx4lo6ouIzAAA9vGyx8Y3HYaSoeHmvilqEOLiZiBobBiCiOqIyKzhP7O0JFxtTeDuY4//+vio9P7yTC5a92LnSr1WZ3dkZgoioIWMAIqoj7u/eKhP8+wWsOXgFzZqYYcW+2HIDj40VsiqFH6C0G4yDm4moMWMAIqoj7m2BycwvhrOVCb49dBU3MwsAAHG3Sxcl9HG2hK2ZMSKu3K72woTcnZ2IGjsGIKI6QgiBbh628LIzwzf/XNV6rkszGzzVzhlD2jrjl6ibHLtDRPSIGICI9OBB43uWhkXjwq0s3EjPx/lbWVrPKeQyHHp/AJytTQBw7A4RUU1hACLSA13jezLzihGw8ST+iU2VypkaK9Da2QJR8ZlS99aPJ+K1xuZw7A4R0aOreL6sHq1cuRKenp4wMTGBr68vjh07VmHZ4uJifPTRR/D29oaJiQk6duyI3bt3a5UJDg5G9+7dYWlpCUdHRwwfPhyXLl2q7bdBVKHpA1sicFArhIRFY9Gv5/HBzn/R7ZMwKfw4WKrw7pDWmNjbE1HxmQgc1ArRnzwtnRMaHgOgdOxORS080we2fODYHiIiusvgAWjLli0IDAzEwoULcfLkSXTs2BFDhgxBcnKyzvLz5s3DmjVrsHz5cpw/fx5vvfUWRowYgVOnTkllDhw4gICAABw5cgRhYWEoLi7G4MGDkZubq6+3RVTOpCeao0szG3xz6Cq+O3xN2p/rf6M64p/3+0OtEVi1/3K57q37QxARET06g2+F4evri+7du2PFihUAAI1GA3d3d7z99tsICgoqV97FxQVz585FQECAdOyFF16Aqakp1q9fr/M1UlJS4OjoiAMHDqBv374PrRO3wqCaFnn9Nv7z0xlps1EAMJLLEPPJ05DJZAAqtw4QW3iIiCpWb7bCKCoqQmRkJGbPni0dk8vl8PPzQ0REhM5zCgsLYWJionXM1NQU//zzT4Wvk5mZCQBo0qRJhdcsLCyUvs/KytJZjqiqCorVCAmLxtd/X4EQgIXKCDmFJdL4nuV7Y6XAw6npRET6Y9AusNTUVKjVajg5OWkdd3JyQmJios5zhgwZgpCQEMTExECj0SAsLAzbtm3DrVu3dJbXaDSYOXMmevfujXbt2uksExwcDGtra+nh7u7+aG+MGo2lD+iaCtp2Bo8Hh+Org6Xhp42LFXIKSyoc30NERPpj8DFAVfXFF1+gZcuW8PHxgVKpxLRp0zBx4kTI5brfSkBAAM6dO4fNmzdXeM3Zs2cjMzNTesTHx9dW9amBKZvddW+IKShWY9Tqw9h8LB4ZecVwtFRheCcXnL+ZxfE9RER1hEG7wOzt7aFQKJCUlKR1PCkpCc7OzjrPcXBwwI4dO1BQUIC0tDS4uLggKCgIzZs3L1d22rRp+O2333Dw4EG4ublVWA+VSgWVSvVob4YapfvX4OnXygETvzuO27lFAIARnV2x0L8Nvj10jdPXiYjqEIMGIKVSia5duyI8PBzDhw8HUNplFR4ejmnTpj3wXBMTE7i6uqK4uBhbt27F6NGjpeeEEHj77bexfft27N+/H15eXrX5NqiBquyg5KlPeuNqai5CwqKlIGSmVGDZmE4Y3LY0yHN8DxFR3WLwhRADAwMxfvx4dOvWDT169MCyZcuQm5uLiRMnAgDGjRsHV1dXBAcHAwCOHj2KhIQEdOrUCQkJCfjggw+g0Wjw3nvvSdcMCAjAxo0b8csvv8DS0lIaT2RtbQ1TU1P9v0mqlyranLRsNeYXu7tj4S/n8NuZW0i70+IDAHIZcOj9AbA1V+q9zkREVDkGD0BjxoxBSkoKFixYgMTERHTq1Am7d++WBkbHxcVpje8pKCjAvHnzcOXKFVhYWGDo0KH44YcfYGNjI5X58ssvAQBPPvmk1mt9++23mDBhQm2/JWogdG0xseCXc1gXcR1WJkbYfPzuWDFTYwXyi9UwkstQohH44ch1tuwQEdVhBl8HqC7iOkB0r7IWHxmAe/9YzJUKDGnrDAFg+6mEcpuT6hrzQ0REtaferANEVNepNQKZ+cUA7oafQW2c8FwnFwz0ccLXf1/h5qRERPUQAxBRBfKL1Jix+RT+Ol86S1Euk0EjBNq7WuOZDi4AuDkpEVF9xQBEpENydgEmfX8Cp2+UriI+tH1TrBrbRereAh6++ShbfoiI6i4GIKL7xCRlY8K3x5GQkQ8AGNPdHZ++0AEAu7eIiBoKBiBqlCpa4+dQbComfnccRSUa2JgaY0QXVyz0b6tVht1bRET1HwMQNTiVWcBQ1xo/P52Ix/tbz0AjAFcbE/z29hMVruXDlh8iovqNAYganIctYHjvoOWQsGgIIVCiEVi+NxYA0NrZEr8E9IaJsUL/lSciIr1gAKIGR9c4nS/2RGPpnhiM7+mBbh622HEqAabGCnTzsMXSPXc3IvX1aoJNkx6HXC4zSN2JiEg/uBCiDlwIsWEI/DEK204mVLq8Qi7D5cVDa7FGRERUm6ry+S1/4LNE9dC5hEy88n9HdYYfKxMjtHC0QC9vOzzXyQVdPWwAAEZyGdQagdDwmHLnEBFRw8MuMKpXHjTAedFv5/F3TAqik3IAAAqZDGohpP25pg9ogcDBraXyoeEx+CXqZrktLAAOciYiaugYgKhe0TXA+XZuEV7//jhOxWVI5XycLXExMbtcuDFSyCvcr4tr/BARNR4MQFSv3BtSitUamBgr8MWeGBSpNQCAJ1rao1kTM2w4GvfAcMMtLIiIGjcOgtaBg6DrtqISDaZsiET4hWTpmIOFCiFjOuKJlg6VWgfoQVtYEBFR/VSVz28GIB0YgOqmErUG204mIHRvDG6k50vHFXIZYj5+mlPXiYgauap8frMLjOqEB7XaLNsTjQu3snApMRvX0vIAAGZKBfKK1DBWyFCsFlixL5ZjdoiIqNIYgKhO0DW4WaMReHvTKew6e0sq18RciXYuVjgYk8rZW0REVG0MQFQn3L81hU9TK8zdfhapOUUAAGtTY0zu2xz5RWqs2BfL2VtERPRIGICozpg+sCWEEFpbUygVckx50huvP+EFKxNjLL1v6vq95wKcvUVERJXDAER1ipOVifS1XAYcmzsQNmZ3d2R/0OwttvwQEVFlcSsMqjMuJWZj7o5zAEpXcdYIYF3EdQPXioiIGiK2AFGdkFdUgpe+PgK1RsDDzgz73nkSK/bFclwPERHVCgYgqhNGro7A7dwimCsV2DqlF+T3TIlnCCIioprGAEQGtzXyBs7fzIIMwDcTusPeQiU9x8HNRERUGxiAyKBik7Mx7864n1mDWuHx5nblyrDlh4iIahoHQZPBFBSrEbDhFPKL1ejlbYeA/i0MXSUiImokGIDIYD789V9cSsqGvYUKy17sBAX38iIiIj1hAKJatzQsGqHhMVrHfolKwKZj8QCAvi3t4WhpoutUIiKiWsEARLWubJ+vshB0NTUXc7adlZ73tDc3VNWIiKiR4iBoqnX3TmcvUWuw50IycovUAICZA1tykDMREekdAxA9kqVh0VDcs2bPvULDY6DWCMwa1Aov9nDHxVtZCN0bKz0/+YnmmPmArS2IiIhqCwMQPZKy7i1Ae7r6p39cxJcHLqOjmzV+O3MTl1Nytc4zksswZ9hjeq0rERFRGQYgeiT3dm/dyiyAqbECO08nIDWnCABw+kYmAEAmAxwsVEjOLoSRXIYSjUBoeAy7v4iIyCAYgOiRTR/YEklZBdhwNE7reCsnC/TytkdPbzucjs/Aqv2XETioFaYPbInQ8BhucUFERAbDAESPTAiByyk50vdGchkiZg+Eg2Xplhah4TFa4QcA9/kiIiKDYgCiR7bnQjKOXLkNADBWyFCsFth0LE5rH697w08Z7vNFRESGwgBEj6RYrcF7P58GAPTwtMWPb/Uq17016wEzvdjyQ0REhsAARI9k8roTSM8rhplSgW8mdAfA7i0iIqr7GICo2jLzixFxOQ0AMGfoY7A0MZaeY/cWERHVZQxAVG2r9sWioESDlo4WeLG7e7nn2fJDRER1FfcCo2qJv52Hbw9dA1Da+mOk4K8SERHVH/zUomr5dPdFFKk16NPCHk+2djB0dYiIiKqEAYiq7GRcOn47cwsyWWnrj0wmM3SViIiIqoQBiKpECIGPfzsPABjV1Q1tXKwMXCMiIqKqYwCiKvn9bCJOxmXA1FiBdwa3NnR1iIiIqoUBiCqtsESNJbsvAADe7NccTlYmBq4RERFR9TAAUYWWhkUjNDxG+n7d4euIv50PJysV1BqBpXcWOiQiIqpvGICoQgq5DCF3QlB6bhGW7y0NQx3dbLB8bywUcg5+JiKi+okLIVKF7t3SYt/FZGQVlMDeQoW/zifp3NyUiIiovqgTLUArV66Ep6cnTExM4Ovri2PHjlVYtri4GB999BG8vb1hYmKCjh07Yvfu3Y90TarY9IEt8XwXV5yKzwAApOYUMvwQEVG9Z/AAtGXLFgQGBmLhwoU4efIkOnbsiCFDhiA5OVln+Xnz5mHNmjVYvnw5zp8/j7feegsjRozAqVOnqn1N0q1YrcGnuy9i+6kE6ZhSIWf4ISKiek8mhDDobpW+vr7o3r07VqxYAQDQaDRwd3fH22+/jaCgoHLlXVxcMHfuXAQEBEjHXnjhBZiammL9+vXVuub9srKyYG1tjczMTFhZNc51bm6k52H6plM4GZchHTNWyFCsFmwBIiKiOqkqn98GbQEqKipCZGQk/Pz8pGNyuRx+fn6IiIjQeU5hYSFMTLSnX5uamuKff/55pGtmZWVpPRqz3eduYegXf+NkXAaURqW/IoGDWiHmk6EIHNRKGhhNRERUX1UrAO3bt69GXjw1NRVqtRpOTk5ax52cnJCYmKjznCFDhiAkJAQxMTHQaDQICwvDtm3bcOvWrWpfMzg4GNbW1tLD3b38zuYNzf1T3AGgoFiN+TvO4a31J5FVUAJnKxMUlWi0WnymD2zJEERERPVetQLQU089BW9vb3z88ceIj4+v6To90BdffIGWLVvCx8cHSqUS06ZNw8SJEyGXV78xa/bs2cjMzJQe+n5PhnDvFHcAiE3OxvCVh/DDkesAgO6ethjVzU1nd1dZCFJrDNp7SkREVG3VmgafkJCAH374Ad9//z0+/PBDDBgwAK+//jqGDx8OpVJZ6evY29tDoVAgKSlJ63hSUhKcnZ11nuPg4IAdO3agoKAAaWlpcHFxQVBQEJo3b17ta6pUKqhUqkrXuyG4d4r7uYRM/B2TivxiNQDg+S6uCBndqVLnExER1UfVajaxt7fHrFmzEBUVhaNHj6JVq1aYOnUqXFxcMH36dJw+fbpS11EqlejatSvCw8OlYxqNBuHh4ejZs+cDzzUxMYGrqytKSkqwdetWPPfcc498zcZm+sCW8HvMEX+dT5LCz5t9mz80/BAREdV3jzwIukuXLpg9ezamTZuGnJwcrF27Fl27dsUTTzyBf//996HnBwYG4uuvv8b333+PCxcuYMqUKcjNzcXEiRMBAOPGjcPs2bOl8kePHsW2bdtw5coV/P3333jqqaeg0Wjw3nvvVfqaVEoIgetpedL3SoUcs4c+ZsAaERER6Ue1A1BxcTF+/vlnDB06FB4eHvjzzz+xYsUKJCUlITY2Fh4eHhg1atRDrzNmzBj873//w4IFC9CpUydERUVh9+7d0iDmuLg4aYAzABQUFGDevHlo06YNRowYAVdXV/zzzz+wsbGp9DWpVFR8BmKScwCUTnEvUms4sJmIiBqFaq0D9Pbbb2PTpk0QQuDVV1/FG2+8gXbt2mmVSUxMhIuLCzQaTY1VVl8ayzpA/iv+wdkbmXisqSX+mNEXoeExCAmL5jo/RERUL1Xl87tag6DPnz+P5cuX4/nnn69w8LC9vX2NTZenmvf5X5dw9kYmAGD+M20AaA+Mvvd7IiKihqZaAejeAcYVXtjICP369avO5UkPopOyAQDuTUzxuJeddLws9HCKOxERNWTVCkDBwcFwcnLCa6+9pnV87dq1SElJwfvvv18jlaPak5VfAgAY1dUdcrlM6zm2/BARUUNXrUHQa9asgY+PT7njbdu2xerVqx+5UlS74m/nIeJKGmQy4IWuboauDhERkd5VKwAlJiaiadOm5Y47ODhozdiiuumnyBsAgD4t7OFqY2rg2hAREelftQKQu7s7Dh06VO74oUOH4OLi8siVotqj0QhsvROARnVr+HueERER6VKtMUCTJk3CzJkzUVxcjAEDBgAoHRj93nvv4Z133qnRClLNOnw5DQkZ+bAyMcLgNlwXiYiIGqdqBaB3330XaWlpmDp1KoqKigCUbk3x/vvva63aTHXPjydKN3p9rpMrTIwVBq4NERGRYVRrIcQyOTk5uHDhAkxNTdGyZcsGs6FoQ10IMTOvGN0X70FRiQY7p/VGBzcbQ1eJiIioxtT6QohlLCws0L1790e5BOnRzjM3UVSigY+zJdq7Whu6OkRERAZT7QB04sQJ/Pjjj4iLi5O6wcps27btkStGNe+nO91fo7q5QyaTPaQ0ERFRw1WtWWCbN29Gr169cOHCBWzfvh3FxcX4999/sXfvXlhbs2WhLrqYmIUzNzJhJJdheCfO1CMiosatWgFo8eLFWLp0KX799VcolUp88cUXuHjxIkaPHo1mzZrVdB2pBvx0onTqu99jTrCzaBhjtYiIiKqrWgHo8uXLGDZsGABAqVQiNzcXMpkMs2bNwldffVWjFaRHV1SiwfZTCQCA0d258jMREVG1ApCtrS2ys0s303R1dcW5c+cAABkZGcjLy6u52lGN2HsxCbdzi+BoqULflg6Grg4REZHBVWsQdN++fREWFob27dtj1KhRmDFjBvbu3YuwsDAMHDiwputIj6is++v5Lm4wUlQr8xIRETUo1QpAK1asQEFBAQBg7ty5MDY2xuHDh/HCCy9g3rx5NVpBejRJWQXYdykZADCqG7u/iIiIgGoEoJKSEvz2228YMmQIAEAulyMoKKjGK0bVszQsGgq5DNMHtgQAbDuZAI0AunrYYteZW1BrBGYNamXgWhIRERlWlftDjIyM8NZbb0ktQFS3KOQyhIRFIzQ8BkII/BRZuvZPE3NjhNwJR0RERI1dtbrAevTogaioKHh4eNR0fegRlbX8hIRF42ZGPq6k5MJILkPY+WQEDmolPU9ERNSYVSsATZ06FYGBgYiPj0fXrl1hbm6u9XyHDh1qpHJUPfeGIAAo0QiGHyIiontUazNUubx8z5lMJoMQAjKZDGq1ukYqZygNYTPU5KwC9FgcDgAwkssQu3iogWtERERUu2p9M9SrV69Wq2KkPwEbTwIAZChtAQoNj2ELEBER0R3VCkAc+1O3/ffPizh+LR0A8NW4brhwK0vqDmMIIiIiqmYAWrdu3QOfHzduXLUqQ48uNDwGK/ddBgC0dLTAQB9HDGrjBAAMQURERHdUKwDNmDFD6/vi4mLk5eVBqVTCzMyMAciACkvUMFMqkFekxpv9vCG/M+29LPSoNVUe8kVERNTgVCsApaenlzsWExODKVOm4N13333kSlH1udqYIa9IjabWJni2o4vWc2z5ISIiKlVjG0O1bNkSS5YsKdc6RPqj1gh8dbC0++uNJ5pDacR9v4iIiHSp0U9IIyMj3Lx5syYvSVWw+1wirqXlwdrUGC92dzd0dYiIiOqsanWB7dy5U+t7IQRu3bqFFStWoHfv3jVSMaoaIQRWHyht/RnfyxPmqmr9aImIiBqFan1KDh8+XOt7mUwGBwcHDBgwAJ9//nlN1Iuq6FBsGs4mZMLEWI4JvTwNXR0iIqI6rVoBSKPR1HQ96BGVtf682L0ZmpgrDVwbIiKiuo2jZBuAszcy8U9sKhRyGd54wsvQ1SEiIqrzqhWAXnjhBXz66afljn/22WcYNWrUI1eKqqas9efZji5wszUzcG2IiIjqvmoFoIMHD2Lo0PKbaz799NM4ePDgI1eKKu9qai7+OHcLAPBmv+YGrg0REVH9UK0AlJOTA6Wy/DgTY2NjZGVlPXKlqPK+OngFGgEM8HGEj3P93LmeiIhI36oVgNq3b48tW7aUO75582a0adPmkStFlZOcVYCtkTcAAFOe9DZwbYiIiOqPas0Cmz9/Pp5//nlcvnwZAwYMAACEh4dj06ZN+Omnn2q0gnTX0rBoKOQyaUuLtYeuoUitQVcPW0RcTsM/MamYNaiVgWtJRERU91WrBcjf3x87duxAbGwspk6dinfeeQc3btzAnj17yq0RRDVHIZchJCwaoeExyCooxoYj1wEAbramCLkTjoiIiOjhZEIIbg9+n6ysLFhbWyMzMxNWVnVrXE1oeAxCwqLRp4U9/olNRRNzJW7nFiFwUCtudkpERI1aVT6/q9UFdvz4cWg0Gvj6+modP3r0KBQKBbp161ady1IlTB/YEkIILN0TAwAMP0RERNVQrS6wgIAAxMfHlzuekJCAgICAR64UPZh/Rxfpa2OFjOGHiIioiqoVgM6fP48uXbqUO965c2ecP3/+kStFDxb8xwUAgAxAsVogNDzGsBUiIiKqZ6rVBaZSqZCUlITmzbUX3rt16xaMjLgLeW0KDY9B2PlkAEBA/xZQGskREhYNAGwJIiIiqqRqpZXBgwdj9uzZ+OWXX2BtbQ0AyMjIwJw5czBo0KAarSDdVTYA2srUCFn5Jeju1QT9WjkAAEMQERFRFVQrAP3vf/9D37594eHhgc6dOwMAoqKi4OTkhB9++KFGK0h3qTUCk59ojq/+vgK5DOjSzAbA3dCj1nBCHxERUWVUKwC5urrizJkz2LBhA06fPg1TU1NMnDgRL730EoyNjWu6jnTHrEGtsPP0TQBAGxcrWJrcvdds+SEiIqq8ag/YMTc3R58+fdCsWTMUFRUBAP744w8AwLPPPlsztaNyjl+9DQDo7tnEwDUhIiKqv6oVgK5cuYIRI0bg7NmzkMlkEEJAJru7CrFara6xCpK249dKA1APBiAiIqJqq9Y0+BkzZsDLywvJyckwMzPDuXPncODAAXTr1g379++v0rVWrlwJT09PmJiYwNfXF8eOHXtg+WXLlqF169YwNTWFu7s7Zs2ahYKCAul5tVqN+fPnw8vLC6ampvD29saiRYvQEBa8zswrxqWkbABANwYgIiKiaqtWC1BERAT27t0Le3t7yOVyKBQK9OnTB8HBwZg+fTpOnTpVqets2bIFgYGBWL16NXx9fbFs2TIMGTIEly5dgqOjY7nyGzduRFBQENauXYtevXohOjoaEyZMgEwmQ0hICADg008/xZdffonvv/8ebdu2xYkTJzBx4kRYW1tj+vTp1Xm7dcaJ67chBNDcwRwOlipDV4eIiKjeqlYLkFqthqWlJQDA3t4eN2+WDsz18PDApUuXKn2dkJAQTJo0CRMnTkSbNm2wevVqmJmZYe3atTrLHz58GL1798bLL78MT09PDB48GC+99JJWq9Hhw4fx3HPPYdiwYfD09MTIkSMxePDgh7Ys1QfHrrL7i4iIqCZUKwC1a9cOp0+fBgD4+vris88+w6FDh/DRRx+VWxyxIkVFRYiMjISfn9/dysjl8PPzQ0REhM5zevXqhcjISCnMXLlyBb///juGDh2qVSY8PBzR0aXr4pw+fRr//PMPnn766eq81Trl2DUOgCYiIqoJ1eoCmzdvHnJzcwEAH330EZ555hk88cQTsLOzw5YtWyp1jdTUVKjVajg5OWkdd3JywsWLF3We8/LLLyM1NRV9+vSBEAIlJSV46623MGfOHKlMUFAQsrKy4OPjA4VCAbVajU8++QRjx46tsC6FhYUoLCyUvs/KyqrUe9Cn/CI1zt7IBAD08GIAIiIiehTVCkBDhgyRvm7RogUuXryI27dvw9bWVms2WE3bv38/Fi9ejFWrVsHX1xexsbGYMWMGFi1ahPnz5wMAfvzxR2zYsAEbN25E27ZtERUVhZkzZ8LFxQXjx4/Xed3g4GB8+OGHtVbvmnAqPh0lGgFnKxO42ZoaujpERET1Wo1t3NWkSdVaJezt7aFQKJCUlKR1PCkpCc7OzjrPmT9/Pl599VW88cYbAID27dsjNzcXkydPxty5cyGXy/Huu+8iKCgIL774olTm+vXrCA4OrjAAzZ49G4GBgdL3WVlZcHd3r9L7qW3Hr6YDALp7NanVkElERNQYVGsMUE1QKpXo2rUrwsPDpWMajQbh4eHo2bOnznPy8vIgl2tXWaFQAIA0zb2iMhqNpsK6qFQqWFlZaT3qmrvr/9gauCZERET1n0G3bg8MDMT48ePRrVs39OjRA8uWLUNubi4mTpwIABg3bhxcXV0RHBwMAPD390dISAg6d+4sdYHNnz8f/v7+UhDy9/fHJ598gmbNmqFt27Y4deoUQkJC8NprrxnsfT6qErUGJ+PutgARERHRozFoABozZgxSUlKwYMECJCYmolOnTti9e7c0MDouLk6rNWfevHmQyWSYN28eEhIS4ODgIAWeMsuXL8f8+fMxdepUJCcnw8XFBW+++SYWLFig9/dXU/69mYW8IjWsTY3RytHS0NUhIiKq92SiISyRXMOysrJgbW2NzMzMOtEd9vXBK/jk9wsY6OOIbyZ0N3R1iIiI6qSqfH4bbAwQVV7Z+j+c/k5ERFQzGIDqOI1G4ETZAogMQERERDWCAaiOu5ySg/S8YpgYy9HOxdrQ1SEiImoQGIDquLLur87utlAa8cdFRERUE/iJWscdv8ruLyIioprGAFTHHb9Wuv4Pd4AnIiKqOQxAddiN9DwkZORDIZehczMbQ1eHiIiowWAAqsPKtr9o52IFc5VB16wkIiJqUBiA6rBjZRugsvuLiIioRjEA1WHHuf4PERFRrWAAqqNu5xYhNjkHAFuAiIiIahoDUB1V1vrT0tECTcyVBq4NERFRw8IAVEdx/R8iIqLawwBUR5W1AHH9HyIioprHAFQH5RaW4NzNLABsASIiIqoNDEB1xNKwaISGxwAATsalQ60RcLUxhauNKULDY7A0LNrANSQiImo4uLpeHaGQyxByJ+SUqDUAgO6etggNj0FIWDQCB7UyZPWIiIgaFAagOmL6wJYAgJCwaLjZmgIAsgtLpPBT9jwRERE9OgagOmT6wJZQawS+uNMVFn4hmeGHiIioFnAMUB3j37Gp9LVSIWf4ISIiqgUMQHXMmoNXpK+L1BppYDQRERHVHHaB1SGh4TH46cQNAKUDoJ9o6SANjGZLEBERUc1hAKojymZ7DfBxwN6LKWhirtQaGA0wBBEREdUUBqA6Qq0RCBzUChoh7gQgFYC7oUetEYasHhERUYPCAFRHzLqzzs/8HecAAHb3bIDKlh8iIqKaxUHQdczt3CIAgJ0Fd4AnIiKqLQxAdUxabiEAoIk5AxAREVFtYQCqY6QWoDtjgIiIiKjmMQDVMWk57AIjIiKqbQxAdYhGI5CeV9YCxABERERUWxiA6pCM/GKUzXa3ZQAiIiKqNQxAdUhaTukAaGtTYxgr+KMhIiKqLfyUrUPSctn9RUREpA8MQHVI2QwwToEnIiKqXQxAdUhZFxhngBEREdUuBqA6JE1qAeIaQERERLWJAagOuc0xQERERHrBAFSHpHEMEBERkV4wANUhHANERESkHwxAdQj3ASMiItIPBqA6hNPgiYiI9IMBqI7QaIQUgOzZBUZERFSrGIDqCO4DRkREpD8MQHXE7dzSAdBWJkbcB4yIiKiW8ZO2jkjLKev+4gBoIiKi2sYAVEdwDSAiIiL9YQCqIxiAiIiI9IcBqI64facLjIsgEhER1T4GoDoi7c4gaC6CSEREVPsYgOoIdoERERHpj8ED0MqVK+Hp6QkTExP4+vri2LFjDyy/bNkytG7dGqampnB3d8esWbNQUFCgVSYhIQGvvPIK7OzsYGpqivbt2+PEiRO1+TYeGbvAiIiI9MfIkC++ZcsWBAYGYvXq1fD19cWyZcswZMgQXLp0CY6OjuXKb9y4EUFBQVi7di169eqF6OhoTJgwATKZDCEhIQCA9PR09O7dG/3798cff/wBBwcHxMTEwNbWVt9vr0rYBUZERKQ/Bg1AISEhmDRpEiZOnAgAWL16NXbt2oW1a9ciKCioXPnDhw+jd+/eePnllwEAnp6eeOmll3D06FGpzKeffgp3d3d8++230jEvL69afiePjvuAERER6Y/BusCKiooQGRkJPz+/u5WRy+Hn54eIiAid5/Tq1QuRkZFSN9mVK1fw+++/Y+jQoVKZnTt3olu3bhg1ahQcHR3RuXNnfP311w+sS2FhIbKysrQe+qTRCKTnFQNgFxgREZE+GCwApaamQq1Ww8nJSeu4k5MTEhMTdZ7z8ssv46OPPkKfPn1gbGwMb29vPPnkk5gzZ45U5sqVK/jyyy/RsmVL/Pnnn5gyZQqmT5+O77//vsK6BAcHw9raWnq4u7vXzJuspMz8YqjvbARma8YAREREVNsMPgi6Kvbv34/Fixdj1apVOHnyJLZt24Zdu3Zh0aJFUhmNRoMuXbpg8eLF6Ny5MyZPnoxJkyZh9erVFV539uzZyMzMlB7x8fH6eDuStHv2AVMa1asfCRERUb1ksDFA9vb2UCgUSEpK0jqelJQEZ2dnnefMnz8fr776Kt544w0AQPv27ZGbm4vJkydj7ty5kMvlaNq0Kdq0aaN13mOPPYatW7dWWBeVSgWVynCDj9OkGWAcAE1ERKQPBmtuUCqV6Nq1K8LDw6VjGo0G4eHh6Nmzp85z8vLyIJdrV1mhUAAAhCjtQurduzcuXbqkVSY6OhoeHh41Wf0axQHQRERE+mXQWWCBgYEYP348unXrhh49emDZsmXIzc2VZoWNGzcOrq6uCA4OBgD4+/sjJCQEnTt3hq+vL2JjYzF//nz4+/tLQWjWrFno1asXFi9ejNGjR+PYsWP46quv8NVXXxnsfT5M6p0AZMcAREREpBcGDUBjxoxBSkoKFixYgMTERHTq1Am7d++WBkbHxcVptfjMmzcPMpkM8+bNQ0JCAhwcHODv749PPvlEKtO9e3ds374ds2fPxkcffQQvLy8sW7YMY8eO1fv7qywugkhERKRfMlHWd0SSrKwsWFtbIzMzE1ZWVrX+egt/OYfvI64joL833h3iU+uvR0RE1BBV5fObU47qgDSpC4yDoImIiPSBAagOSGMXGBERkV4xANUBnAVGRESkXwxAdQC7wIiIiPSLAcjASvcBYxcYERGRPjEAGRj3ASMiItI/BiADK+v+suQ+YERERHrDT1wDS8sp3QjVnvuAERER6Q0DkIFxBhgREZH+MQAZWBoDEBERkd4xABlYWQuQPWeAERER6Q0DkIGVjQFiCxAREZH+MAAZ2N0uMA6CJiIi0hcGIANjFxgREZH+MQAZWNlGqOwCIyIi0h8GIAPjLDAiIiL9YwAyIK19wDgGiIiISG8YgAzo3n3A2AJERESkPwxABsR9wIiIiAyDn7oGVDYDzI6tP0RERHrFAGRAt3NLF0G040aoREREesUAZECpnAJPRERkEAxABsQuMCIiIsNgADIgKQBxFWgiIiK9YgAyoFRpI1SOASIiItInBiADYhcYERGRYTAAGRC7wIiIiAyDAciAuA8YERGRYTAAGYhGI+7pAuMYICIiIn1iADKQrIK7+4DZmhsbuDZERESNCwOQgdy7D5jKSGHg2hARETUuDEAGkpbDGWBERESGwgBkIGX7gHEANBERkf4xABlImjQFngOgiYiI9I0ByEDYBUZERGQ4DEAGcptrABERERkMA5CBsAuMiIjIcBiADKRsEDS7wIiIiPSPAchAysYAsQuMiIhI/xiADIT7gBERERkOA5ABaDQC6XcCkD3HABEREekdA5ABZBUUo4T7gBERERkMA5ABSPuAqbgPGBERkSEwABnAbWkKPMf/EBERGQIDkAFwBhgREZFhMQAZQJq0ESoHQBMRERkCA5AB3M4pmwHGFiAiIiJDYAAyAK4BREREZFgMQAbAAERERGRYdSIArVy5Ep6enjAxMYGvry+OHTv2wPLLli1D69atYWpqCnd3d8yaNQsFBQU6yy5ZsgQymQwzZ86shZpXj7QPGLvAiIiIDMLgAWjLli0IDAzEwoULcfLkSXTs2BFDhgxBcnKyzvIbN25EUFAQFi5ciAsXLuCbb77Bli1bMGfOnHJljx8/jjVr1qBDhw61/TaqpGwWmB0HQRMRERmEwQNQSEgIJk2ahIkTJ6JNmzZYvXo1zMzMsHbtWp3lDx8+jN69e+Pll1+Gp6cnBg8ejJdeeqlcq1FOTg7Gjh2Lr7/+Gra2tvp4K5XGLjAiIiLDMmgAKioqQmRkJPz8/KRjcrkcfn5+iIiI0HlOr169EBkZKQWeK1eu4Pfff8fQoUO1ygUEBGDYsGFa165IYWEhsrKytB61RYi7+4CxC4yIiMgwjAz54qmpqVCr1XByctI67uTkhIsXL+o85+WXX0Zqair69OkDIQRKSkrw1ltvaXWBbd68GSdPnsTx48crVY/g4GB8+OGH1X8jVZCVXyLtA8YWICIiIsMweBdYVe3fvx+LFy/GqlWrcPLkSWzbtg27du3CokWLAADx8fGYMWMGNmzYABMTk0pdc/bs2cjMzJQe8fHxtVb/skUQuQ8YERGR4Ri0Bcje3h4KhQJJSUlax5OSkuDs7KzznPnz5+PVV1/FG2+8AQBo3749cnNzMXnyZMydOxeRkZFITk5Gly5dpHPUajUOHjyIFStWoLCwEAqFdvBQqVRQqfQzIFka/8PuLyIiIoMxaAuQUqlE165dER4eLh3TaDQIDw9Hz549dZ6Tl5cHuVy72mWBRgiBgQMH4uzZs4iKipIe3bp1w9ixYxEVFVUu/Ojb3RlgDEBERESGYtAWIAAIDAzE+PHj0a1bN/To0QPLli1Dbm4uJk6cCAAYN24cXF1dERwcDADw9/dHSEgIOnfuDF9fX8TGxmL+/Pnw9/eHQqGApaUl2rVrp/Ua5ubmsLOzK3fcEG5LM8A4BZ6IiMhQDB6AxowZg5SUFCxYsACJiYno1KkTdu/eLQ2MjouL02rxmTdvHmQyGebNm4eEhAQ4ODjA398fn3zyiaHeQpWk5dxZBJEtQERERAYjE0IIQ1eirsnKyoK1tTUyMzNhZWVVo9f+YOe/+O7wNUx50hvvP+VTo9cmIiJqzKry+V3vZoHVd2VdYGwBIiIiMhwGID1L4z5gREREBscApGdls8A4CJqIiMhwGID0jF1gREREhscApEdCiLsBiF1gREREBmPwafCNwdKwaCjkMozv6VluH7DQ8BioNQKzBrUyZBWJiIgaFbYA6YFCLkNIWDSW7YkGcHcfsNDwGITcCUdERESkP2wB0oPpA1sCAELCSgNQEwulFH4CB7WSniciIiL9YAuQnkwf2BL+HVwAAHFpeQw/REREBsQApEd+bRwBAAKAUiFn+CEiIjIQBiA9up6WBwAwVshQpNYgNDzGwDUiIiJqnDgGSE/uH/NT9j0AtgQRERHpGQOQHuga8Hz/wGiGICIiIv1hANIDtUboHPBc9r36ztpAREREpB8yIQQ/fe+TlZUFa2trZGZmwsrKytDVISIiokqoyuc3B0ETERFRo8MARERERI0OAxARERE1OgxARERE1OgwABEREVGjwwBEREREjQ4DEBERETU6DEBERETU6DAAERERUaPDAERERESNDvcC06Fsd5CsrCwD14SIiIgqq+xzuzK7fDEA6ZCdnQ0AcHd3N3BNiIiIqKqys7NhbW39wDLcDFUHjUaDmzdvwtLSEjKZrEavnZWVBXd3d8THx3OjVT3g/dYv3m/94v3WL95v/arO/RZCIDs7Gy4uLpDLHzzKhy1AOsjlcri5udXqa1hZWfEPSI94v/WL91u/eL/1i/dbv6p6vx/W8lOGg6CJiIio0WEAIiIiokaHAUjPVCoVFi5cCJVKZeiqNAq83/rF+61fvN/6xfutX7V9vzkImoiIiBodtgARERFRo8MARERERI0OAxARERE1OgxARERE1OgwAOnRypUr4enpCRMTE/j6+uLYsWOGrlKDcPDgQfj7+8PFxQUymQw7duzQel4IgQULFqBp06YwNTWFn58fYmJiDFPZBiA4OBjdu3eHpaUlHB0dMXz4cFy6dEmrTEFBAQICAmBnZwcLCwu88MILSEpKMlCN67cvv/wSHTp0kBaD69mzJ/744w/ped7r2rVkyRLIZDLMnDlTOsZ7XnM++OADyGQyrYePj4/0fG3eawYgPdmyZQsCAwOxcOFCnDx5Eh07dsSQIUOQnJxs6KrVe7m5uejYsSNWrlyp8/nPPvsMoaGhWL16NY4ePQpzc3MMGTIEBQUFeq5pw3DgwAEEBATgyJEjCAsLQ3FxMQYPHozc3FypzKxZs/Drr7/ip59+woEDB3Dz5k08//zzBqx1/eXm5oYlS5YgMjISJ06cwIABA/Dcc8/h33//BcB7XZuOHz+ONWvWoEOHDlrHec9rVtu2bXHr1i3p8c8//0jP1eq9FqQXPXr0EAEBAdL3arVauLi4iODgYAPWquEBILZv3y59r9FohLOzs/jvf/8rHcvIyBAqlUps2rTJADVseJKTkwUAceDAASFE6f01NjYWP/30k1TmwoULAoCIiIgwVDUbFFtbW/F///d/vNe1KDs7W7Rs2VKEhYWJfv36iRkzZggh+Ptd0xYuXCg6duyo87navtdsAdKDoqIiREZGws/PTzoml8vh5+eHiIgIA9as4bt69SoSExO17r21tTV8fX1572tIZmYmAKBJkyYAgMjISBQXF2vdcx8fHzRr1oz3/BGp1Wps3rwZubm56NmzJ+91LQoICMCwYcO07i3A3+/aEBMTAxcXFzRv3hxjx45FXFwcgNq/19wMVQ9SU1OhVqvh5OSkddzJyQkXL140UK0ah8TERADQee/LnqPq02g0mDlzJnr37o127doBKL3nSqUSNjY2WmV5z6vv7Nmz6NmzJwoKCmBhYYHt27ejTZs2iIqK4r2uBZs3b8bJkydx/Pjxcs/x97tm+fr64rvvvkPr1q1x69YtfPjhh3jiiSdw7ty5Wr/XDEBEVG0BAQE4d+6cVp891bzWrVsjKioKmZmZ+PnnnzF+/HgcOHDA0NVqkOLj4zFjxgyEhYXBxMTE0NVp8J5++mnp6w4dOsDX1xceHh748ccfYWpqWquvzS4wPbC3t4dCoSg3cj0pKQnOzs4GqlXjUHZ/ee9r3rRp0/Dbb79h3759cHNzk447OzujqKgIGRkZWuV5z6tPqVSiRYsW6Nq1K4KDg9GxY0d88cUXvNe1IDIyEsnJyejSpQuMjIxgZGSEAwcOIDQ0FEZGRnBycuI9r0U2NjZo1aoVYmNja/33mwFID5RKJbp27Yrw8HDpmEajQXh4OHr27GnAmjV8Xl5ecHZ21rr3WVlZOHr0KO99NQkhMG3aNGzfvh179+6Fl5eX1vNdu3aFsbGx1j2/dOkS4uLieM9riEajQWFhIe91LRg4cCDOnj2LqKgo6dGtWzeMHTtW+pr3vPbk5OTg8uXLaNq0ae3/fj/yMGqqlM2bNwuVSiW+++47cf78eTF58mRhY2MjEhMTDV21ei87O1ucOnVKnDp1SgAQISEh4tSpU+L69etCCCGWLFkibGxsxC+//CLOnDkjnnvuOeHl5SXy8/MNXPP6acqUKcLa2lrs379f3Lp1S3rk5eVJZd566y3RrFkzsXfvXnHixAnRs2dP0bNnTwPWuv4KCgoSBw4cEFevXhVnzpwRQUFBQiaTib/++ksIwXutD/fOAhOC97wmvfPOO2L//v3i6tWr4tChQ8LPz0/Y29uL5ORkIUTt3msGID1avny5aNasmVAqlaJHjx7iyJEjhq5Sg7Bv3z4BoNxj/PjxQojSqfDz588XTk5OQqVSiYEDB4pLly4ZttL1mK57DUB8++23Upn8/HwxdepUYWtrK8zMzMSIESPErVu3DFfpeuy1114THh4eQqlUCgcHBzFw4EAp/AjBe60P9wcg3vOaM2bMGNG0aVOhVCqFq6urGDNmjIiNjZWer817LRNCiEdvRyIiIiKqPzgGiIiIiBodBiAiIiJqdBiAiIiIqNFhACIiIqJGhwGIiIiIGh0GICIiImp0GICIiIio0WEAIiKqhP3790Mmk5Xbl4iI6icGICIiImp0GICIiIio0WEAIqJ6QaPRIDg4GF5eXjA1NUXHjh3x888/A7jbPbVr1y506NABJiYmePzxx3Hu3Dmta2zduhVt27aFSqWCp6cnPv/8c63nCwsL8f7778Pd3R0qlQotWrTAN998o1UmMjIS3bp1g5mZGXr16oVLly7V7hsnolrBAERE9UJwcDDWrVuH1atX499//8WsWbPwyiuv4MCBA1KZd999F59//jmOHz8OBwcH+Pv7o7i4GEBpcBk9ejRefPFFnD17Fh988AHmz5+P7777Tjp/3Lhx2LRpE0JDQ3HhwgWsWbMGFhYWWvWYO3cuPv/8c5w4cQJGRkZ47bXX9PL+iahmcTNUIqrzCgsL0aRJE+zZswc9e/aUjr/xxhvIy8vD5MmT0b9/f2zevBljxowBANy+fRtubm747rvvMHr0aIwdOxYpKSn466+/pPPfe+897Nq1C//++y+io6PRunVrhIWFwc/Pr1wd9u/fj/79+2PPnj0YOHAgAOD333/HsGHDkJ+fDxMTk1q+C0RUk9gCRER1XmxsLPLy8jBo0CBYWFhIj3Xr1uHy5ctSuXvDUZMmTdC6dWtcuHABAHDhwgX07t1b67q9e/dGTEwM1Go1oqKioFAo0K9fvwfWpUOHDtLXTZs2BQAkJyc/8nskIv0yMnQFiIgeJicnBwCwa9cuuLq6aj2nUqm0QlB1mZqaVqqcsbGx9LVMJgNQOj6JiOoXtgARUZ3Xpk0bqFQqxMXFoUWLFloPd3d3qdyRI0ekr9PT0xEdHY3HHnsMAPDYY4/h0KFDWtc9dOgQWrVqBYVCgfbt20Oj0WiNKSKihostQERU51laWuI///kPZs2aBY1Ggz59+iAzMxOHDh2ClZUVPDw8AAAfffQR7Ozs4OTkhLlz58Le3h7Dhw8HALzzzjvo3r07Fi1ahDFjxiAiIgIrVqzAqlWrAACenp4YP348XnvtNYSGhqJjx464fv06kpOTMXr0aEO9dSKqJQxARFQvLFq0CA4ODggODsaVK1dgY2ODLl26YM6cOVIX1JIlSzBjxgzExMSgU6dO+PXXX6FUKgEAXbp0wY8//ogFCxZg0aJFaNq0KT766CNMmDBBeo0vv/wSc+bMwdSpU5GWloZmzZphzpw5hni7RFTLOAuMiOq9shla6enpsLGxMXR1iKge4BggIiIianQYgIiIiKjRYRcYERERNTpsASIiIqJGhwGIiIiIGh0GICIiImp0GICIiIio0WEAIiIiokaHAYiIiIgaHQYgIiIianQYgIiIiKjRYQAiIiKiRuf/AX/rhry5havgAAAAAElFTkSuQmCC"},"metadata":{}}]},{"cell_type":"code","source":"history = m2_history1 +m2_history2 +m2_history3 +m2_history4 + m2_history5\naccuracies = [result['val_acc'] for result in history]\nplt.plot(accuracies, '-x')\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.title('Accuracy Compared To # of Epochs')","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:01:37.262250Z","iopub.execute_input":"2024-09-01T14:01:37.262622Z","iopub.status.idle":"2024-09-01T14:01:37.545251Z","shell.execute_reply.started":"2024-09-01T14:01:37.262585Z","shell.execute_reply":"2024-09-01T14:01:37.544325Z"},"trusted":true},"execution_count":47,"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Accuracy Compared To # of Epochs')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"Test Set Results ","metadata":{}},{"cell_type":"code","source":"final_model1 = MnistModel(input_size, hidden_size=hidden_size, out_size=num_classes)\nto_device(final_model1, device)\noptimizer1 = torch.optim.SGD(final_model1.parameters(), lr=0.1)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:05:51.693743Z","iopub.execute_input":"2024-09-01T14:05:51.694177Z","iopub.status.idle":"2024-09-01T14:05:51.703991Z","shell.execute_reply.started":"2024-09-01T14:05:51.694137Z","shell.execute_reply":"2024-09-01T14:05:51.702744Z"},"trusted":true},"execution_count":48,"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"MnistModel(\n  (linear1): Linear(in_features=784, out_features=32, bias=True)\n  (linear2): Linear(in_features=32, out_features=10, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"def test_evaluate(model, test_loader):\n    \"\"\"Evaluate the model's performance on the test set\"\"\"\n    outputs = [model.test_step(batch) for batch in test_loader]\n    return model.test_epoch_end(outputs)\n\ndef test_fit(epochs, lr, model, train_loader, test_loader,opt_func=torch.optim.SGD):\n    \"\"\"Train the model using gradient descent\"\"\"\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        for batch in train_loader:\n            loss = model.training_step(batch)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = test_evaluate(model, test_loader)\n        model.epoch_endtest(epoch, result)\n        history.append(result)\n    return history","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:26:32.556290Z","iopub.execute_input":"2024-09-01T14:26:32.556722Z","iopub.status.idle":"2024-09-01T14:26:32.565251Z","shell.execute_reply.started":"2024-09-01T14:26:32.556682Z","shell.execute_reply":"2024-09-01T14:26:32.563958Z"},"trusted":true},"execution_count":57,"outputs":[]},{"cell_type":"code","source":"test_fit(5,0.1,model_gpu,train_loader,test_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:26:34.252838Z","iopub.execute_input":"2024-09-01T14:26:34.253282Z","iopub.status.idle":"2024-09-01T14:26:52.790314Z","shell.execute_reply.started":"2024-09-01T14:26:34.253235Z","shell.execute_reply":"2024-09-01T14:26:52.789123Z"},"trusted":true},"execution_count":58,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], test_loss: 0.1180, test_acc: 0.9671\nEpoch [1], test_loss: 0.1175, test_acc: 0.9691\nEpoch [2], test_loss: 0.1173, test_acc: 0.9679\nEpoch [3], test_loss: 0.1178, test_acc: 0.9681\nEpoch [4], test_loss: 0.1177, test_acc: 0.9681\n","output_type":"stream"},{"execution_count":58,"output_type":"execute_result","data":{"text/plain":"[{'test_loss': 0.11797226965427399, 'test_acc': 0.9671301245689392},\n {'test_loss': 0.11747308820486069, 'test_acc': 0.9690602421760559},\n {'test_loss': 0.11729401350021362, 'test_acc': 0.9679113626480103},\n {'test_loss': 0.11775507032871246, 'test_acc': 0.9680836796760559},\n {'test_loss': 0.11767067760229111, 'test_acc': 0.9681066870689392}]"},"metadata":{}}]},{"cell_type":"code","source":"final_model_1 = MnistModel(input_size, hidden_size=hidden_size, out_size=num_classes)\nto_device(final_model_1,device)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:27:39.254612Z","iopub.execute_input":"2024-09-01T14:27:39.255492Z","iopub.status.idle":"2024-09-01T14:27:39.264684Z","shell.execute_reply.started":"2024-09-01T14:27:39.255444Z","shell.execute_reply":"2024-09-01T14:27:39.263441Z"},"trusted":true},"execution_count":59,"outputs":[{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"MnistModel(\n  (linear1): Linear(in_features=784, out_features=32, bias=True)\n  (linear2): Linear(in_features=32, out_features=10, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"test_fit(5,0.1,final_model_1,train_loader,test_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:27:56.075461Z","iopub.execute_input":"2024-09-01T14:27:56.076245Z","iopub.status.idle":"2024-09-01T14:28:14.524168Z","shell.execute_reply.started":"2024-09-01T14:27:56.076206Z","shell.execute_reply":"2024-09-01T14:28:14.522897Z"},"trusted":true},"execution_count":60,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], test_loss: 0.3570, test_acc: 0.8944\nEpoch [1], test_loss: 0.2914, test_acc: 0.9138\nEpoch [2], test_loss: 0.2570, test_acc: 0.9217\nEpoch [3], test_loss: 0.2351, test_acc: 0.9301\nEpoch [4], test_loss: 0.2176, test_acc: 0.9363\n","output_type":"stream"},{"execution_count":60,"output_type":"execute_result","data":{"text/plain":"[{'test_loss': 0.356963187456131, 'test_acc': 0.894416332244873},\n {'test_loss': 0.291448175907135, 'test_acc': 0.9137752652168274},\n {'test_loss': 0.25696441531181335, 'test_acc': 0.9216911196708679},\n {'test_loss': 0.2351100891828537, 'test_acc': 0.930066704750061},\n {'test_loss': 0.21756891906261444, 'test_acc': 0.9363395571708679}]"},"metadata":{}}]},{"cell_type":"code","source":"final_model_2 = MnistModel(input_size, hidden_size=hidden_size, out_size=num_classes)\nto_device(final_model_2,device)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:28:57.513055Z","iopub.execute_input":"2024-09-01T14:28:57.513488Z","iopub.status.idle":"2024-09-01T14:28:57.523480Z","shell.execute_reply.started":"2024-09-01T14:28:57.513449Z","shell.execute_reply":"2024-09-01T14:28:57.522400Z"},"trusted":true},"execution_count":62,"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"MnistModel(\n  (linear1): Linear(in_features=784, out_features=32, bias=True)\n  (linear2): Linear(in_features=32, out_features=10, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"test_fit(5,0.0178878518656460,final_model_2,train_loader,test_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:28:59.123548Z","iopub.execute_input":"2024-09-01T14:28:59.123975Z","iopub.status.idle":"2024-09-01T14:29:17.712308Z","shell.execute_reply.started":"2024-09-01T14:28:59.123936Z","shell.execute_reply":"2024-09-01T14:29:17.711112Z"},"trusted":true},"execution_count":63,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], test_loss: 0.8520, test_acc: 0.8163\nEpoch [1], test_loss: 0.5180, test_acc: 0.8662\nEpoch [2], test_loss: 0.4254, test_acc: 0.8851\nEpoch [3], test_loss: 0.3824, test_acc: 0.8927\nEpoch [4], test_loss: 0.3577, test_acc: 0.8982\n","output_type":"stream"},{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"[{'test_loss': 0.852023720741272, 'test_acc': 0.8163488507270813},\n {'test_loss': 0.5179511308670044, 'test_acc': 0.8662339448928833},\n {'test_loss': 0.42540761828422546, 'test_acc': 0.8850873112678528},\n {'test_loss': 0.3823980689048767, 'test_acc': 0.8927044868469238},\n {'test_loss': 0.35770007967948914, 'test_acc': 0.8981502652168274}]"},"metadata":{}}]},{"cell_type":"code","source":"final_model_3 = MnistModel(input_size, hidden_size=hidden_size, out_size=num_classes)\nto_device(final_model_3,device)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:30:35.407355Z","iopub.execute_input":"2024-09-01T14:30:35.408444Z","iopub.status.idle":"2024-09-01T14:30:35.418010Z","shell.execute_reply.started":"2024-09-01T14:30:35.408395Z","shell.execute_reply":"2024-09-01T14:30:35.416887Z"},"trusted":true},"execution_count":64,"outputs":[{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"MnistModel(\n  (linear1): Linear(in_features=784, out_features=32, bias=True)\n  (linear2): Linear(in_features=32, out_features=10, bias=True)\n)"},"metadata":{}}]},{"cell_type":"code","source":"test_fit(5,0.09833396206168134,final_model_3,train_loader,test_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:31:02.453122Z","iopub.execute_input":"2024-09-01T14:31:02.453574Z","iopub.status.idle":"2024-09-01T14:31:21.018709Z","shell.execute_reply.started":"2024-09-01T14:31:02.453526Z","shell.execute_reply":"2024-09-01T14:31:21.017464Z"},"trusted":true},"execution_count":65,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], test_loss: 0.3738, test_acc: 0.8887\nEpoch [1], test_loss: 0.3086, test_acc: 0.9086\nEpoch [2], test_loss: 0.2665, test_acc: 0.9198\nEpoch [3], test_loss: 0.2424, test_acc: 0.9295\nEpoch [4], test_loss: 0.2192, test_acc: 0.9336\n","output_type":"stream"},{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"[{'test_loss': 0.3738436698913574, 'test_acc': 0.888671875},\n {'test_loss': 0.3085577189922333, 'test_acc': 0.9085707664489746},\n {'test_loss': 0.2665146291255951, 'test_acc': 0.919806957244873},\n {'test_loss': 0.2423611730337143, 'test_acc': 0.9295267462730408},\n {'test_loss': 0.21922683715820312, 'test_acc': 0.933628261089325}]"},"metadata":{}}]},{"cell_type":"markdown","source":"Testing on Previously Initialized Models","metadata":{}},{"cell_type":"code","source":"test_fit(5,0.1,model_gpu,train_loader,test_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:31:49.170033Z","iopub.execute_input":"2024-09-01T14:31:49.170586Z","iopub.status.idle":"2024-09-01T14:32:08.025133Z","shell.execute_reply.started":"2024-09-01T14:31:49.170542Z","shell.execute_reply":"2024-09-01T14:32:08.023911Z"},"trusted":true},"execution_count":66,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], test_loss: 0.1185, test_acc: 0.9679\nEpoch [1], test_loss: 0.1189, test_acc: 0.9673\nEpoch [2], test_loss: 0.1187, test_acc: 0.9683\nEpoch [3], test_loss: 0.1184, test_acc: 0.9683\nEpoch [4], test_loss: 0.1190, test_acc: 0.9675\n","output_type":"stream"},{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"[{'test_loss': 0.11845051497220993, 'test_acc': 0.9679113626480103},\n {'test_loss': 0.11890190839767456, 'test_acc': 0.9673253893852234},\n {'test_loss': 0.11867675930261612, 'test_acc': 0.9683019518852234},\n {'test_loss': 0.11838853359222412, 'test_acc': 0.9683019518852234},\n {'test_loss': 0.1189950630068779, 'test_acc': 0.9674977660179138}]"},"metadata":{}}]},{"cell_type":"code","source":"test_fit(5,0.0178878518656460,m1,train_loader,test_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:33:15.808805Z","iopub.execute_input":"2024-09-01T14:33:15.809856Z","iopub.status.idle":"2024-09-01T14:33:34.253882Z","shell.execute_reply.started":"2024-09-01T14:33:15.809809Z","shell.execute_reply":"2024-09-01T14:33:34.252636Z"},"trusted":true},"execution_count":67,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], test_loss: 0.1853, test_acc: 0.9467\nEpoch [1], test_loss: 0.1837, test_acc: 0.9466\nEpoch [2], test_loss: 0.1825, test_acc: 0.9464\nEpoch [3], test_loss: 0.1819, test_acc: 0.9470\nEpoch [4], test_loss: 0.1814, test_acc: 0.9468\n","output_type":"stream"},{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"[{'test_loss': 0.18525461852550507, 'test_acc': 0.9466911554336548},\n {'test_loss': 0.18367475271224976, 'test_acc': 0.946645200252533},\n {'test_loss': 0.18250368535518646, 'test_acc': 0.946449875831604},\n {'test_loss': 0.18194501101970673, 'test_acc': 0.9470129013061523},\n {'test_loss': 0.18144869804382324, 'test_acc': 0.9468404650688171}]"},"metadata":{}}]},{"cell_type":"code","source":"test_fit(5,0.09833396206168134,m2,train_loader,test_loader)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T14:33:58.069459Z","iopub.execute_input":"2024-09-01T14:33:58.070400Z","iopub.status.idle":"2024-09-01T14:34:16.120126Z","shell.execute_reply.started":"2024-09-01T14:33:58.070338Z","shell.execute_reply":"2024-09-01T14:34:16.118880Z"},"trusted":true},"execution_count":68,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_36/55389227.py:4: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  return torch.tensor(torch.sum(preds == labels)/len(preds))\n","output_type":"stream"},{"name":"stdout","text":"Epoch [0], test_loss: 0.1251, test_acc: 0.9668\nEpoch [1], test_loss: 0.1264, test_acc: 0.9650\nEpoch [2], test_loss: 0.1201, test_acc: 0.9670\nEpoch [3], test_loss: 0.1287, test_acc: 0.9639\nEpoch [4], test_loss: 0.1230, test_acc: 0.9664\n","output_type":"stream"},{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"[{'test_loss': 0.12509560585021973, 'test_acc': 0.9668083190917969},\n {'test_loss': 0.12644045054912567, 'test_acc': 0.965004563331604},\n {'test_loss': 0.12010657042264938, 'test_acc': 0.9670036435127258},\n {'test_loss': 0.12871237099170685, 'test_acc': 0.9638557434082031},\n {'test_loss': 0.1229509487748146, 'test_acc': 0.96639484167099}]"},"metadata":{}}]}]}